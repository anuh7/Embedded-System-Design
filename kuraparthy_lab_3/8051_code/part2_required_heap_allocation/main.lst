                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___sdcc_heap_size
                                     12 	.globl _main
                                     13 	.globl __sdcc_external_startup
                                     14 	.globl _free
                                     15 	.globl _malloc
                                     16 	.globl _atoi
                                     17 	.globl _printf_tiny
                                     18 	.globl _puts
                                     19 	.globl _printf
                                     20 	.globl _printf_small
                                     21 	.globl _TF1
                                     22 	.globl _TR1
                                     23 	.globl _TF0
                                     24 	.globl _TR0
                                     25 	.globl _IE1
                                     26 	.globl _IT1
                                     27 	.globl _IE0
                                     28 	.globl _IT0
                                     29 	.globl _SM0
                                     30 	.globl _SM1
                                     31 	.globl _SM2
                                     32 	.globl _REN
                                     33 	.globl _TB8
                                     34 	.globl _RB8
                                     35 	.globl _TI
                                     36 	.globl _RI
                                     37 	.globl _CY
                                     38 	.globl _AC
                                     39 	.globl _F0
                                     40 	.globl _RS1
                                     41 	.globl _RS0
                                     42 	.globl _OV
                                     43 	.globl _F1
                                     44 	.globl _P
                                     45 	.globl _RD
                                     46 	.globl _WR
                                     47 	.globl _T1
                                     48 	.globl _T0
                                     49 	.globl _INT1
                                     50 	.globl _INT0
                                     51 	.globl _TXD0
                                     52 	.globl _TXD
                                     53 	.globl _RXD0
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _P2_7
                                     64 	.globl _P2_6
                                     65 	.globl _P2_5
                                     66 	.globl _P2_4
                                     67 	.globl _P2_3
                                     68 	.globl _P2_2
                                     69 	.globl _P2_1
                                     70 	.globl _P2_0
                                     71 	.globl _P1_7
                                     72 	.globl _P1_6
                                     73 	.globl _P1_5
                                     74 	.globl _P1_4
                                     75 	.globl _P1_3
                                     76 	.globl _P1_2
                                     77 	.globl _P1_1
                                     78 	.globl _P1_0
                                     79 	.globl _P0_7
                                     80 	.globl _P0_6
                                     81 	.globl _P0_5
                                     82 	.globl _P0_4
                                     83 	.globl _P0_3
                                     84 	.globl _P0_2
                                     85 	.globl _P0_1
                                     86 	.globl _P0_0
                                     87 	.globl _PS
                                     88 	.globl _PT1
                                     89 	.globl _PX1
                                     90 	.globl _PT0
                                     91 	.globl _PX0
                                     92 	.globl _EA
                                     93 	.globl _ES
                                     94 	.globl _ET1
                                     95 	.globl _EX1
                                     96 	.globl _ET0
                                     97 	.globl _EX0
                                     98 	.globl _BREG_F7
                                     99 	.globl _BREG_F6
                                    100 	.globl _BREG_F5
                                    101 	.globl _BREG_F4
                                    102 	.globl _BREG_F3
                                    103 	.globl _BREG_F2
                                    104 	.globl _BREG_F1
                                    105 	.globl _BREG_F0
                                    106 	.globl _P5_7
                                    107 	.globl _P5_6
                                    108 	.globl _P5_5
                                    109 	.globl _P5_4
                                    110 	.globl _P5_3
                                    111 	.globl _P5_2
                                    112 	.globl _P5_1
                                    113 	.globl _P5_0
                                    114 	.globl _P4_7
                                    115 	.globl _P4_6
                                    116 	.globl _P4_5
                                    117 	.globl _P4_4
                                    118 	.globl _P4_3
                                    119 	.globl _P4_2
                                    120 	.globl _P4_1
                                    121 	.globl _P4_0
                                    122 	.globl _PX0L
                                    123 	.globl _PT0L
                                    124 	.globl _PX1L
                                    125 	.globl _PT1L
                                    126 	.globl _PSL
                                    127 	.globl _PT2L
                                    128 	.globl _PPCL
                                    129 	.globl _EC
                                    130 	.globl _CCF0
                                    131 	.globl _CCF1
                                    132 	.globl _CCF2
                                    133 	.globl _CCF3
                                    134 	.globl _CCF4
                                    135 	.globl _CR
                                    136 	.globl _CF
                                    137 	.globl _TF2
                                    138 	.globl _EXF2
                                    139 	.globl _RCLK
                                    140 	.globl _TCLK
                                    141 	.globl _EXEN2
                                    142 	.globl _TR2
                                    143 	.globl _C_T2
                                    144 	.globl _CP_RL2
                                    145 	.globl _T2CON_7
                                    146 	.globl _T2CON_6
                                    147 	.globl _T2CON_5
                                    148 	.globl _T2CON_4
                                    149 	.globl _T2CON_3
                                    150 	.globl _T2CON_2
                                    151 	.globl _T2CON_1
                                    152 	.globl _T2CON_0
                                    153 	.globl _PT2
                                    154 	.globl _ET2
                                    155 	.globl _TMOD
                                    156 	.globl _TL1
                                    157 	.globl _TL0
                                    158 	.globl _TH1
                                    159 	.globl _TH0
                                    160 	.globl _TCON
                                    161 	.globl _SP
                                    162 	.globl _SCON
                                    163 	.globl _SBUF0
                                    164 	.globl _SBUF
                                    165 	.globl _PSW
                                    166 	.globl _PCON
                                    167 	.globl _P3
                                    168 	.globl _P2
                                    169 	.globl _P1
                                    170 	.globl _P0
                                    171 	.globl _IP
                                    172 	.globl _IE
                                    173 	.globl _DP0L
                                    174 	.globl _DPL
                                    175 	.globl _DP0H
                                    176 	.globl _DPH
                                    177 	.globl _B
                                    178 	.globl _ACC
                                    179 	.globl _EECON
                                    180 	.globl _KBF
                                    181 	.globl _KBE
                                    182 	.globl _KBLS
                                    183 	.globl _BRL
                                    184 	.globl _BDRCON
                                    185 	.globl _T2MOD
                                    186 	.globl _SPDAT
                                    187 	.globl _SPSTA
                                    188 	.globl _SPCON
                                    189 	.globl _SADEN
                                    190 	.globl _SADDR
                                    191 	.globl _WDTPRG
                                    192 	.globl _WDTRST
                                    193 	.globl _P5
                                    194 	.globl _P4
                                    195 	.globl _IPH1
                                    196 	.globl _IPL1
                                    197 	.globl _IPH0
                                    198 	.globl _IPL0
                                    199 	.globl _IEN1
                                    200 	.globl _IEN0
                                    201 	.globl _CMOD
                                    202 	.globl _CL
                                    203 	.globl _CH
                                    204 	.globl _CCON
                                    205 	.globl _CCAPM4
                                    206 	.globl _CCAPM3
                                    207 	.globl _CCAPM2
                                    208 	.globl _CCAPM1
                                    209 	.globl _CCAPM0
                                    210 	.globl _CCAP4L
                                    211 	.globl _CCAP3L
                                    212 	.globl _CCAP2L
                                    213 	.globl _CCAP1L
                                    214 	.globl _CCAP0L
                                    215 	.globl _CCAP4H
                                    216 	.globl _CCAP3H
                                    217 	.globl _CCAP2H
                                    218 	.globl _CCAP1H
                                    219 	.globl _CCAP0H
                                    220 	.globl _CKCON1
                                    221 	.globl _CKCON0
                                    222 	.globl _CKRL
                                    223 	.globl _AUXR1
                                    224 	.globl _AUXR
                                    225 	.globl _TH2
                                    226 	.globl _TL2
                                    227 	.globl _RCAP2H
                                    228 	.globl _RCAP2L
                                    229 	.globl _T2CON
                                    230 	.globl _hexDump_PARM_3
                                    231 	.globl _hexDump_PARM_2
                                    232 	.globl _heap
                                    233 	.globl ___sdcc_heap
                                    234 	.globl _dataout
                                    235 	.globl _serial_init
                                    236 	.globl _hexDump
                                    237 	.globl _putchar
                                    238 	.globl _getchar
                                    239 	.globl _putstr
                                    240 	.globl _getstr
                                    241 ;--------------------------------------------------------
                                    242 ; special function registers
                                    243 ;--------------------------------------------------------
                                    244 	.area RSEG    (ABS,DATA)
      000000                        245 	.org 0x0000
                           0000C8   246 _T2CON	=	0x00c8
                           0000CA   247 _RCAP2L	=	0x00ca
                           0000CB   248 _RCAP2H	=	0x00cb
                           0000CC   249 _TL2	=	0x00cc
                           0000CD   250 _TH2	=	0x00cd
                           00008E   251 _AUXR	=	0x008e
                           0000A2   252 _AUXR1	=	0x00a2
                           000097   253 _CKRL	=	0x0097
                           00008F   254 _CKCON0	=	0x008f
                           0000AF   255 _CKCON1	=	0x00af
                           0000FA   256 _CCAP0H	=	0x00fa
                           0000FB   257 _CCAP1H	=	0x00fb
                           0000FC   258 _CCAP2H	=	0x00fc
                           0000FD   259 _CCAP3H	=	0x00fd
                           0000FE   260 _CCAP4H	=	0x00fe
                           0000EA   261 _CCAP0L	=	0x00ea
                           0000EB   262 _CCAP1L	=	0x00eb
                           0000EC   263 _CCAP2L	=	0x00ec
                           0000ED   264 _CCAP3L	=	0x00ed
                           0000EE   265 _CCAP4L	=	0x00ee
                           0000DA   266 _CCAPM0	=	0x00da
                           0000DB   267 _CCAPM1	=	0x00db
                           0000DC   268 _CCAPM2	=	0x00dc
                           0000DD   269 _CCAPM3	=	0x00dd
                           0000DE   270 _CCAPM4	=	0x00de
                           0000D8   271 _CCON	=	0x00d8
                           0000F9   272 _CH	=	0x00f9
                           0000E9   273 _CL	=	0x00e9
                           0000D9   274 _CMOD	=	0x00d9
                           0000A8   275 _IEN0	=	0x00a8
                           0000B1   276 _IEN1	=	0x00b1
                           0000B8   277 _IPL0	=	0x00b8
                           0000B7   278 _IPH0	=	0x00b7
                           0000B2   279 _IPL1	=	0x00b2
                           0000B3   280 _IPH1	=	0x00b3
                           0000C0   281 _P4	=	0x00c0
                           0000E8   282 _P5	=	0x00e8
                           0000A6   283 _WDTRST	=	0x00a6
                           0000A7   284 _WDTPRG	=	0x00a7
                           0000A9   285 _SADDR	=	0x00a9
                           0000B9   286 _SADEN	=	0x00b9
                           0000C3   287 _SPCON	=	0x00c3
                           0000C4   288 _SPSTA	=	0x00c4
                           0000C5   289 _SPDAT	=	0x00c5
                           0000C9   290 _T2MOD	=	0x00c9
                           00009B   291 _BDRCON	=	0x009b
                           00009A   292 _BRL	=	0x009a
                           00009C   293 _KBLS	=	0x009c
                           00009D   294 _KBE	=	0x009d
                           00009E   295 _KBF	=	0x009e
                           0000D2   296 _EECON	=	0x00d2
                           0000E0   297 _ACC	=	0x00e0
                           0000F0   298 _B	=	0x00f0
                           000083   299 _DPH	=	0x0083
                           000083   300 _DP0H	=	0x0083
                           000082   301 _DPL	=	0x0082
                           000082   302 _DP0L	=	0x0082
                           0000A8   303 _IE	=	0x00a8
                           0000B8   304 _IP	=	0x00b8
                           000080   305 _P0	=	0x0080
                           000090   306 _P1	=	0x0090
                           0000A0   307 _P2	=	0x00a0
                           0000B0   308 _P3	=	0x00b0
                           000087   309 _PCON	=	0x0087
                           0000D0   310 _PSW	=	0x00d0
                           000099   311 _SBUF	=	0x0099
                           000099   312 _SBUF0	=	0x0099
                           000098   313 _SCON	=	0x0098
                           000081   314 _SP	=	0x0081
                           000088   315 _TCON	=	0x0088
                           00008C   316 _TH0	=	0x008c
                           00008D   317 _TH1	=	0x008d
                           00008A   318 _TL0	=	0x008a
                           00008B   319 _TL1	=	0x008b
                           000089   320 _TMOD	=	0x0089
                                    321 ;--------------------------------------------------------
                                    322 ; special function bits
                                    323 ;--------------------------------------------------------
                                    324 	.area RSEG    (ABS,DATA)
      000000                        325 	.org 0x0000
                           0000AD   326 _ET2	=	0x00ad
                           0000BD   327 _PT2	=	0x00bd
                           0000C8   328 _T2CON_0	=	0x00c8
                           0000C9   329 _T2CON_1	=	0x00c9
                           0000CA   330 _T2CON_2	=	0x00ca
                           0000CB   331 _T2CON_3	=	0x00cb
                           0000CC   332 _T2CON_4	=	0x00cc
                           0000CD   333 _T2CON_5	=	0x00cd
                           0000CE   334 _T2CON_6	=	0x00ce
                           0000CF   335 _T2CON_7	=	0x00cf
                           0000C8   336 _CP_RL2	=	0x00c8
                           0000C9   337 _C_T2	=	0x00c9
                           0000CA   338 _TR2	=	0x00ca
                           0000CB   339 _EXEN2	=	0x00cb
                           0000CC   340 _TCLK	=	0x00cc
                           0000CD   341 _RCLK	=	0x00cd
                           0000CE   342 _EXF2	=	0x00ce
                           0000CF   343 _TF2	=	0x00cf
                           0000DF   344 _CF	=	0x00df
                           0000DE   345 _CR	=	0x00de
                           0000DC   346 _CCF4	=	0x00dc
                           0000DB   347 _CCF3	=	0x00db
                           0000DA   348 _CCF2	=	0x00da
                           0000D9   349 _CCF1	=	0x00d9
                           0000D8   350 _CCF0	=	0x00d8
                           0000AE   351 _EC	=	0x00ae
                           0000BE   352 _PPCL	=	0x00be
                           0000BD   353 _PT2L	=	0x00bd
                           0000BC   354 _PSL	=	0x00bc
                           0000BB   355 _PT1L	=	0x00bb
                           0000BA   356 _PX1L	=	0x00ba
                           0000B9   357 _PT0L	=	0x00b9
                           0000B8   358 _PX0L	=	0x00b8
                           0000C0   359 _P4_0	=	0x00c0
                           0000C1   360 _P4_1	=	0x00c1
                           0000C2   361 _P4_2	=	0x00c2
                           0000C3   362 _P4_3	=	0x00c3
                           0000C4   363 _P4_4	=	0x00c4
                           0000C5   364 _P4_5	=	0x00c5
                           0000C6   365 _P4_6	=	0x00c6
                           0000C7   366 _P4_7	=	0x00c7
                           0000E8   367 _P5_0	=	0x00e8
                           0000E9   368 _P5_1	=	0x00e9
                           0000EA   369 _P5_2	=	0x00ea
                           0000EB   370 _P5_3	=	0x00eb
                           0000EC   371 _P5_4	=	0x00ec
                           0000ED   372 _P5_5	=	0x00ed
                           0000EE   373 _P5_6	=	0x00ee
                           0000EF   374 _P5_7	=	0x00ef
                           0000F0   375 _BREG_F0	=	0x00f0
                           0000F1   376 _BREG_F1	=	0x00f1
                           0000F2   377 _BREG_F2	=	0x00f2
                           0000F3   378 _BREG_F3	=	0x00f3
                           0000F4   379 _BREG_F4	=	0x00f4
                           0000F5   380 _BREG_F5	=	0x00f5
                           0000F6   381 _BREG_F6	=	0x00f6
                           0000F7   382 _BREG_F7	=	0x00f7
                           0000A8   383 _EX0	=	0x00a8
                           0000A9   384 _ET0	=	0x00a9
                           0000AA   385 _EX1	=	0x00aa
                           0000AB   386 _ET1	=	0x00ab
                           0000AC   387 _ES	=	0x00ac
                           0000AF   388 _EA	=	0x00af
                           0000B8   389 _PX0	=	0x00b8
                           0000B9   390 _PT0	=	0x00b9
                           0000BA   391 _PX1	=	0x00ba
                           0000BB   392 _PT1	=	0x00bb
                           0000BC   393 _PS	=	0x00bc
                           000080   394 _P0_0	=	0x0080
                           000081   395 _P0_1	=	0x0081
                           000082   396 _P0_2	=	0x0082
                           000083   397 _P0_3	=	0x0083
                           000084   398 _P0_4	=	0x0084
                           000085   399 _P0_5	=	0x0085
                           000086   400 _P0_6	=	0x0086
                           000087   401 _P0_7	=	0x0087
                           000090   402 _P1_0	=	0x0090
                           000091   403 _P1_1	=	0x0091
                           000092   404 _P1_2	=	0x0092
                           000093   405 _P1_3	=	0x0093
                           000094   406 _P1_4	=	0x0094
                           000095   407 _P1_5	=	0x0095
                           000096   408 _P1_6	=	0x0096
                           000097   409 _P1_7	=	0x0097
                           0000A0   410 _P2_0	=	0x00a0
                           0000A1   411 _P2_1	=	0x00a1
                           0000A2   412 _P2_2	=	0x00a2
                           0000A3   413 _P2_3	=	0x00a3
                           0000A4   414 _P2_4	=	0x00a4
                           0000A5   415 _P2_5	=	0x00a5
                           0000A6   416 _P2_6	=	0x00a6
                           0000A7   417 _P2_7	=	0x00a7
                           0000B0   418 _P3_0	=	0x00b0
                           0000B1   419 _P3_1	=	0x00b1
                           0000B2   420 _P3_2	=	0x00b2
                           0000B3   421 _P3_3	=	0x00b3
                           0000B4   422 _P3_4	=	0x00b4
                           0000B5   423 _P3_5	=	0x00b5
                           0000B6   424 _P3_6	=	0x00b6
                           0000B7   425 _P3_7	=	0x00b7
                           0000B0   426 _RXD	=	0x00b0
                           0000B0   427 _RXD0	=	0x00b0
                           0000B1   428 _TXD	=	0x00b1
                           0000B1   429 _TXD0	=	0x00b1
                           0000B2   430 _INT0	=	0x00b2
                           0000B3   431 _INT1	=	0x00b3
                           0000B4   432 _T0	=	0x00b4
                           0000B5   433 _T1	=	0x00b5
                           0000B6   434 _WR	=	0x00b6
                           0000B7   435 _RD	=	0x00b7
                           0000D0   436 _P	=	0x00d0
                           0000D1   437 _F1	=	0x00d1
                           0000D2   438 _OV	=	0x00d2
                           0000D3   439 _RS0	=	0x00d3
                           0000D4   440 _RS1	=	0x00d4
                           0000D5   441 _F0	=	0x00d5
                           0000D6   442 _AC	=	0x00d6
                           0000D7   443 _CY	=	0x00d7
                           000098   444 _RI	=	0x0098
                           000099   445 _TI	=	0x0099
                           00009A   446 _RB8	=	0x009a
                           00009B   447 _TB8	=	0x009b
                           00009C   448 _REN	=	0x009c
                           00009D   449 _SM2	=	0x009d
                           00009E   450 _SM1	=	0x009e
                           00009F   451 _SM0	=	0x009f
                           000088   452 _IT0	=	0x0088
                           000089   453 _IE0	=	0x0089
                           00008A   454 _IT1	=	0x008a
                           00008B   455 _IE1	=	0x008b
                           00008C   456 _TR0	=	0x008c
                           00008D   457 _TF0	=	0x008d
                           00008E   458 _TR1	=	0x008e
                           00008F   459 _TF1	=	0x008f
                                    460 ;--------------------------------------------------------
                                    461 ; overlayable register banks
                                    462 ;--------------------------------------------------------
                                    463 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        464 	.ds 8
                                    465 ;--------------------------------------------------------
                                    466 ; internal ram data
                                    467 ;--------------------------------------------------------
                                    468 	.area DSEG    (DATA)
      000000                        469 _main_sloc0_1_0:
      000000                        470 	.ds 2
      000002                        471 _main_sloc1_1_0:
      000002                        472 	.ds 2
      000004                        473 _main_sloc2_1_0:
      000004                        474 	.ds 3
      000007                        475 _hexDump_sloc0_1_0:
      000007                        476 	.ds 2
                                    477 ;--------------------------------------------------------
                                    478 ; overlayable items in internal ram
                                    479 ;--------------------------------------------------------
                                    480 ;--------------------------------------------------------
                                    481 ; Stack segment in internal ram
                                    482 ;--------------------------------------------------------
                                    483 	.area	SSEG
      000000                        484 __start__stack:
      000000                        485 	.ds	1
                                    486 
                                    487 ;--------------------------------------------------------
                                    488 ; indirectly addressable internal ram data
                                    489 ;--------------------------------------------------------
                                    490 	.area ISEG    (DATA)
                                    491 ;--------------------------------------------------------
                                    492 ; absolute internal ram data
                                    493 ;--------------------------------------------------------
                                    494 	.area IABS    (ABS,DATA)
                                    495 	.area IABS    (ABS,DATA)
                                    496 ;--------------------------------------------------------
                                    497 ; bit data
                                    498 ;--------------------------------------------------------
                                    499 	.area BSEG    (BIT)
                                    500 ;--------------------------------------------------------
                                    501 ; paged external ram data
                                    502 ;--------------------------------------------------------
                                    503 	.area PSEG    (PAG,XDATA)
                                    504 ;--------------------------------------------------------
                                    505 ; external ram data
                                    506 ;--------------------------------------------------------
                                    507 	.area XSEG    (XDATA)
      000000                        508 ___sdcc_heap::
      000000                        509 	.ds 4800
      0012C0                        510 _heap::
      0012C0                        511 	.ds 180
      001374                        512 _main_buffer0_65536_51:
      001374                        513 	.ds 2
      001376                        514 _main_newbuffers_65536_51:
      001376                        515 	.ds 60
      0013B2                        516 _main_size0_65536_51:
      0013B2                        517 	.ds 15
      0013C1                        518 _main_isFlag_65536_51:
      0013C1                        519 	.ds 1
      0013C2                        520 _main_total_size_65536_51:
      0013C2                        521 	.ds 2
      0013C4                        522 _main_character_65536_51:
      0013C4                        523 	.ds 5
      0013C9                        524 _main_buffer0ptr_65536_51:
      0013C9                        525 	.ds 2
      0013CB                        526 _main_buffer0CurrentSize_65536_51:
      0013CB                        527 	.ds 2
      0013CD                        528 _main_newBuffersize_65536_51:
      0013CD                        529 	.ds 10
      0013D7                        530 _main_newBufferscount_65536_51:
      0013D7                        531 	.ds 1
      0013D8                        532 _main_deleteBufferNumber_65536_51:
      0013D8                        533 	.ds 10
      0013E2                        534 _main_numOfCharactersReceived_65536_51:
      0013E2                        535 	.ds 2
      0013E4                        536 _dataout_v_65536_88:
      0013E4                        537 	.ds 1
      0013E5                        538 _hexDump_PARM_2:
      0013E5                        539 	.ds 2
      0013E7                        540 _hexDump_PARM_3:
      0013E7                        541 	.ds 2
      0013E9                        542 _hexDump_addr_65536_92:
      0013E9                        543 	.ds 3
      0013EC                        544 _hexDump_buff_65536_93:
      0013EC                        545 	.ds 17
      0013FD                        546 _putchar_c_65536_98:
      0013FD                        547 	.ds 2
      0013FF                        548 _putstr_s_65536_102:
      0013FF                        549 	.ds 3
      001402                        550 _getstr_a_65536_105:
      001402                        551 	.ds 3
                                    552 ;--------------------------------------------------------
                                    553 ; absolute external ram data
                                    554 ;--------------------------------------------------------
                                    555 	.area XABS    (ABS,XDATA)
                                    556 ;--------------------------------------------------------
                                    557 ; external initialized ram data
                                    558 ;--------------------------------------------------------
                                    559 	.area XISEG   (XDATA)
                                    560 	.area HOME    (CODE)
                                    561 	.area GSINIT0 (CODE)
                                    562 	.area GSINIT1 (CODE)
                                    563 	.area GSINIT2 (CODE)
                                    564 	.area GSINIT3 (CODE)
                                    565 	.area GSINIT4 (CODE)
                                    566 	.area GSINIT5 (CODE)
                                    567 	.area GSINIT  (CODE)
                                    568 	.area GSFINAL (CODE)
                                    569 	.area CSEG    (CODE)
                                    570 ;--------------------------------------------------------
                                    571 ; interrupt vector
                                    572 ;--------------------------------------------------------
                                    573 	.area HOME    (CODE)
      000000                        574 __interrupt_vect:
      000000 02r00r00         [24]  575 	ljmp	__sdcc_gsinit_startup
                                    576 ;--------------------------------------------------------
                                    577 ; global & static initialisations
                                    578 ;--------------------------------------------------------
                                    579 	.area HOME    (CODE)
                                    580 	.area GSINIT  (CODE)
                                    581 	.area GSFINAL (CODE)
                                    582 	.area GSINIT  (CODE)
                                    583 	.globl __sdcc_gsinit_startup
                                    584 	.globl __sdcc_program_startup
                                    585 	.globl __start__stack
                                    586 	.globl __mcs51_genXINIT
                                    587 	.globl __mcs51_genXRAMCLEAR
                                    588 	.globl __mcs51_genRAMCLEAR
                                    589 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  590 	ljmp	__sdcc_program_startup
                                    591 ;--------------------------------------------------------
                                    592 ; Home
                                    593 ;--------------------------------------------------------
                                    594 	.area HOME    (CODE)
                                    595 	.area HOME    (CODE)
      000003                        596 __sdcc_program_startup:
      000003 02r00r07         [24]  597 	ljmp	_main
                                    598 ;	return from main will return to caller
                                    599 ;--------------------------------------------------------
                                    600 ; code
                                    601 ;--------------------------------------------------------
                                    602 	.area CSEG    (CODE)
                                    603 ;------------------------------------------------------------
                                    604 ;Allocation info for local variables in function '_sdcc_external_startup'
                                    605 ;------------------------------------------------------------
                                    606 ;	main.c:39: _sdcc_external_startup(){
                                    607 ;	-----------------------------------------
                                    608 ;	 function _sdcc_external_startup
                                    609 ;	-----------------------------------------
      000000                        610 __sdcc_external_startup:
                           000007   611 	ar7 = 0x07
                           000006   612 	ar6 = 0x06
                           000005   613 	ar5 = 0x05
                           000004   614 	ar4 = 0x04
                           000003   615 	ar3 = 0x03
                           000002   616 	ar2 = 0x02
                           000001   617 	ar1 = 0x01
                           000000   618 	ar0 = 0x00
                                    619 ;	main.c:40: AUXR |=0x0C;                                                                /*enabling internal ram size=1024*/
      000000 43 8E 0C         [24]  620 	orl	_AUXR,#0x0c
                                    621 ;	main.c:41: return 0;
      000003 90 00 00         [24]  622 	mov	dptr,#0x0000
                                    623 ;	main.c:42: }
      000006 22               [24]  624 	ret
                                    625 ;------------------------------------------------------------
                                    626 ;Allocation info for local variables in function 'main'
                                    627 ;------------------------------------------------------------
                                    628 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                                    629 ;sloc1                     Allocated with name '_main_sloc1_1_0'
                                    630 ;sloc2                     Allocated with name '_main_sloc2_1_0'
                                    631 ;buffer0                   Allocated with name '_main_buffer0_65536_51'
                                    632 ;buffer1                   Allocated with name '_main_buffer1_65536_51'
                                    633 ;newbuffers                Allocated with name '_main_newbuffers_65536_51'
                                    634 ;size0                     Allocated with name '_main_size0_65536_51'
                                    635 ;isFlag                    Allocated with name '_main_isFlag_65536_51'
                                    636 ;total_size                Allocated with name '_main_total_size_65536_51'
                                    637 ;character                 Allocated with name '_main_character_65536_51'
                                    638 ;buffer0ptr                Allocated with name '_main_buffer0ptr_65536_51'
                                    639 ;buffer0CurrentSize        Allocated with name '_main_buffer0CurrentSize_65536_51'
                                    640 ;newBuffersize             Allocated with name '_main_newBuffersize_65536_51'
                                    641 ;newbuffersizeint          Allocated with name '_main_newbuffersizeint_65536_51'
                                    642 ;newBufferscount           Allocated with name '_main_newBufferscount_65536_51'
                                    643 ;deleteBufferNumber        Allocated with name '_main_deleteBufferNumber_65536_51'
                                    644 ;deleteBufferNumberint     Allocated with name '_main_deleteBufferNumberint_65536_51'
                                    645 ;numOfCharactersReceived   Allocated with name '_main_numOfCharactersReceived_65536_51'
                                    646 ;i                         Allocated with name '_main_i_327680_71'
                                    647 ;i                         Allocated with name '_main_i_327680_74'
                                    648 ;i                         Allocated with name '_main_i_327680_78'
                                    649 ;i                         Allocated with name '_main_i_327680_82'
                                    650 ;i                         Allocated with name '_main_i_327680_85'
                                    651 ;------------------------------------------------------------
                                    652 ;	main.c:68: void main(void)
                                    653 ;	-----------------------------------------
                                    654 ;	 function main
                                    655 ;	-----------------------------------------
      000007                        656 _main:
                                    657 ;	main.c:70: __xdata uint16_t* buffer0=NULL;                             /*initializing buffer0 and buffer1 pointers*/
      000007 90r13r74         [24]  658 	mov	dptr,#_main_buffer0_65536_51
      00000A E4               [12]  659 	clr	a
      00000B F0               [24]  660 	movx	@dptr,a
      00000C A3               [24]  661 	inc	dptr
      00000D F0               [24]  662 	movx	@dptr,a
                                    663 ;	main.c:74: uint8_t isFlag=0;
      00000E 90r13rC1         [24]  664 	mov	dptr,#_main_isFlag_65536_51
      000011 F0               [24]  665 	movx	@dptr,a
                                    666 ;	main.c:75: int total_size=0;
      000012 90r13rC2         [24]  667 	mov	dptr,#_main_total_size_65536_51
      000015 F0               [24]  668 	movx	@dptr,a
      000016 A3               [24]  669 	inc	dptr
      000017 F0               [24]  670 	movx	@dptr,a
                                    671 ;	main.c:77: uint16_t buffer0ptr=0;                                      /*points to elements in buffer0*/
      000018 90r13rC9         [24]  672 	mov	dptr,#_main_buffer0ptr_65536_51
      00001B F0               [24]  673 	movx	@dptr,a
      00001C A3               [24]  674 	inc	dptr
      00001D F0               [24]  675 	movx	@dptr,a
                                    676 ;	main.c:78: uint16_t buffer0CurrentSize=0;
      00001E 90r13rCB         [24]  677 	mov	dptr,#_main_buffer0CurrentSize_65536_51
      000021 F0               [24]  678 	movx	@dptr,a
      000022 A3               [24]  679 	inc	dptr
      000023 F0               [24]  680 	movx	@dptr,a
                                    681 ;	main.c:81: uint8_t newBufferscount=0;
      000024 90r13rD7         [24]  682 	mov	dptr,#_main_newBufferscount_65536_51
      000027 F0               [24]  683 	movx	@dptr,a
                                    684 ;	main.c:84: uint16_t numOfCharactersReceived=0;                         /*holds the numbers of characters received*/
      000028 90r13rE2         [24]  685 	mov	dptr,#_main_numOfCharactersReceived_65536_51
      00002B F0               [24]  686 	movx	@dptr,a
      00002C A3               [24]  687 	inc	dptr
      00002D F0               [24]  688 	movx	@dptr,a
                                    689 ;	main.c:86: serial_init();                                              /*initializes serial communication*/
      00002E 12r0ArA2         [24]  690 	lcall	_serial_init
                                    691 ;	main.c:88: while(1){
      000031                        692 00162$:
                                    693 ;	main.c:89: if (isFlag==0){
      000031 90r13rC1         [24]  694 	mov	dptr,#_main_isFlag_65536_51
      000034 E0               [24]  695 	movx	a,@dptr
      000035 60 03            [24]  696 	jz	00326$
      000037 02r01rF2         [24]  697 	ljmp	00159$
      00003A                        698 00326$:
                                    699 ;	main.c:98: puts("Enter the size between 48-4800 to allocate buffers\n\r");
      00003A 90r03rB1         [24]  700 	mov	dptr,#___str_53
      00003D 75 F0 80         [24]  701 	mov	b,#0x80
      000040 12r00r00         [24]  702 	lcall	_puts
                                    703 ;	main.c:99: getstr(size0);
      000043 90r13rB2         [24]  704 	mov	dptr,#_main_size0_65536_51
      000046 75 F0 00         [24]  705 	mov	b,#0x00
      000049 12r0Dr12         [24]  706 	lcall	_getstr
                                    707 ;	main.c:100: DEBUGPORT(0x77);
      00004C 75 82 77         [24]  708 	mov	dpl,#0x77
      00004F 12r0Ar8F         [24]  709 	lcall	_dataout
                                    710 ;	main.c:101: total_size=atoi(size0);                             /*converts the received string size to int*/
      000052 90r13rB2         [24]  711 	mov	dptr,#_main_size0_65536_51
      000055 75 F0 00         [24]  712 	mov	b,#0x00
      000058 12r00r00         [24]  713 	lcall	_atoi
      00005B AE 82            [24]  714 	mov	r6,dpl
      00005D AF 83            [24]  715 	mov	r7,dph
      00005F 90r13rC2         [24]  716 	mov	dptr,#_main_total_size_65536_51
      000062 EE               [12]  717 	mov	a,r6
      000063 F0               [24]  718 	movx	@dptr,a
      000064 EF               [12]  719 	mov	a,r7
      000065 A3               [24]  720 	inc	dptr
      000066 F0               [24]  721 	movx	@dptr,a
                                    722 ;	main.c:102: printf_tiny("size entered= %d \n\r", total_size);
      000067 C0 07            [24]  723 	push	ar7
      000069 C0 06            [24]  724 	push	ar6
      00006B C0 06            [24]  725 	push	ar6
      00006D C0 07            [24]  726 	push	ar7
      00006F 74r02            [12]  727 	mov	a,#___str_8
      000071 C0 E0            [24]  728 	push	acc
      000073 74s00            [12]  729 	mov	a,#(___str_8 >> 8)
      000075 C0 E0            [24]  730 	push	acc
      000077 12r00r00         [24]  731 	lcall	_printf_tiny
      00007A E5 81            [12]  732 	mov	a,sp
      00007C 24 FC            [12]  733 	add	a,#0xfc
      00007E F5 81            [12]  734 	mov	sp,a
      000080 D0 06            [24]  735 	pop	ar6
      000082 D0 07            [24]  736 	pop	ar7
                                    737 ;	main.c:103: if (((total_size>47) && (total_size<4801)) && (total_size%16==0)){                  /*buffer size conditions*/
      000084 C3               [12]  738 	clr	c
      000085 74 2F            [12]  739 	mov	a,#0x2f
      000087 9E               [12]  740 	subb	a,r6
      000088 74 80            [12]  741 	mov	a,#(0x00 ^ 0x80)
      00008A 8F F0            [24]  742 	mov	b,r7
      00008C 63 F0 80         [24]  743 	xrl	b,#0x80
      00008F 95 F0            [12]  744 	subb	a,b
      000091 50 9E            [24]  745 	jnc	00162$
      000093 C3               [12]  746 	clr	c
      000094 EE               [12]  747 	mov	a,r6
      000095 94 C1            [12]  748 	subb	a,#0xc1
      000097 EF               [12]  749 	mov	a,r7
      000098 64 80            [12]  750 	xrl	a,#0x80
      00009A 94 92            [12]  751 	subb	a,#0x92
      00009C 50 93            [24]  752 	jnc	00162$
      00009E 90r00r00         [24]  753 	mov	dptr,#__modsint_PARM_2
      0000A1 74 10            [12]  754 	mov	a,#0x10
      0000A3 F0               [24]  755 	movx	@dptr,a
      0000A4 E4               [12]  756 	clr	a
      0000A5 A3               [24]  757 	inc	dptr
      0000A6 F0               [24]  758 	movx	@dptr,a
      0000A7 8E 82            [24]  759 	mov	dpl,r6
      0000A9 8F 83            [24]  760 	mov	dph,r7
      0000AB C0 07            [24]  761 	push	ar7
      0000AD C0 06            [24]  762 	push	ar6
      0000AF 12r00r00         [24]  763 	lcall	__modsint
      0000B2 E5 82            [12]  764 	mov	a,dpl
      0000B4 85 83 F0         [24]  765 	mov	b,dph
      0000B7 D0 06            [24]  766 	pop	ar6
      0000B9 D0 07            [24]  767 	pop	ar7
      0000BB 45 F0            [12]  768 	orl	a,b
      0000BD 60 03            [24]  769 	jz	00329$
      0000BF 02r00r31         [24]  770 	ljmp	00162$
      0000C2                        771 00329$:
                                    772 ;	main.c:104: isFlag=1;
      0000C2 90r13rC1         [24]  773 	mov	dptr,#_main_isFlag_65536_51
      0000C5 74 01            [12]  774 	mov	a,#0x01
      0000C7 F0               [24]  775 	movx	@dptr,a
                                    776 ;	main.c:105: buffer0= (uint16_t *)(malloc(total_size));                          /*malloc the buffer0 and buffer1 pointers with required size*/
      0000C8 8E 82            [24]  777 	mov	dpl,r6
      0000CA 8F 83            [24]  778 	mov	dph,r7
      0000CC C0 07            [24]  779 	push	ar7
      0000CE C0 06            [24]  780 	push	ar6
      0000D0 12r00r00         [24]  781 	lcall	_malloc
      0000D3 AC 82            [24]  782 	mov	r4,dpl
      0000D5 AD 83            [24]  783 	mov	r5,dph
      0000D7 D0 06            [24]  784 	pop	ar6
      0000D9 D0 07            [24]  785 	pop	ar7
      0000DB 90r13r74         [24]  786 	mov	dptr,#_main_buffer0_65536_51
      0000DE EC               [12]  787 	mov	a,r4
      0000DF F0               [24]  788 	movx	@dptr,a
      0000E0 ED               [12]  789 	mov	a,r5
      0000E1 A3               [24]  790 	inc	dptr
      0000E2 F0               [24]  791 	movx	@dptr,a
                                    792 ;	main.c:106: buffer1= (uint16_t *)(malloc(total_size));
      0000E3 8E 82            [24]  793 	mov	dpl,r6
      0000E5 8F 83            [24]  794 	mov	dph,r7
      0000E7 C0 07            [24]  795 	push	ar7
      0000E9 C0 06            [24]  796 	push	ar6
      0000EB C0 05            [24]  797 	push	ar5
      0000ED C0 04            [24]  798 	push	ar4
      0000EF 12r00r00         [24]  799 	lcall	_malloc
      0000F2 AA 82            [24]  800 	mov	r2,dpl
      0000F4 AB 83            [24]  801 	mov	r3,dph
      0000F6 D0 04            [24]  802 	pop	ar4
      0000F8 D0 05            [24]  803 	pop	ar5
      0000FA D0 06            [24]  804 	pop	ar6
      0000FC D0 07            [24]  805 	pop	ar7
      0000FE 8A*00            [24]  806 	mov	_main_sloc0_1_0,r2
      000100 8B*01            [24]  807 	mov	(_main_sloc0_1_0 + 1),r3
                                    808 ;	main.c:107: if ((buffer0!=NULL) && (buffer1!=NULL)){
      000102 EC               [12]  809 	mov	a,r4
      000103 4D               [12]  810 	orl	a,r5
      000104 70 03            [24]  811 	jnz	00330$
      000106 02r01rB4         [24]  812 	ljmp	00105$
      000109                        813 00330$:
      000109 E5*00            [12]  814 	mov	a,_main_sloc0_1_0
      00010B 45*01            [12]  815 	orl	a,(_main_sloc0_1_0 + 1)
      00010D 70 03            [24]  816 	jnz	00331$
      00010F 02r01rB4         [24]  817 	ljmp	00105$
      000112                        818 00331$:
                                    819 ;	main.c:108: heap[0].buffernumber=0;                                         /*hold the buffer information in heap array structure*/
      000112 90r12rC0         [24]  820 	mov	dptr,#_heap
      000115 E4               [12]  821 	clr	a
      000116 F0               [24]  822 	movx	@dptr,a
                                    823 ;	main.c:109: heap[0].bufferStartaddress=buffer0;
      000117 8C 00            [24]  824 	mov	ar0,r4
      000119 8D 01            [24]  825 	mov	ar1,r5
      00011B 7B 00            [12]  826 	mov	r3,#0x00
      00011D 90r12rC1         [24]  827 	mov	dptr,#(_heap + 0x0001)
      000120 E8               [12]  828 	mov	a,r0
      000121 F0               [24]  829 	movx	@dptr,a
      000122 E9               [12]  830 	mov	a,r1
      000123 A3               [24]  831 	inc	dptr
      000124 F0               [24]  832 	movx	@dptr,a
      000125 EB               [12]  833 	mov	a,r3
      000126 A3               [24]  834 	inc	dptr
      000127 F0               [24]  835 	movx	@dptr,a
                                    836 ;	main.c:110: heap[0].buffersize=total_size;
      000128 8E*02            [24]  837 	mov	_main_sloc1_1_0,r6
      00012A 8F*03            [24]  838 	mov	(_main_sloc1_1_0 + 1),r7
      00012C 90r12rC4         [24]  839 	mov	dptr,#(_heap + 0x0004)
      00012F E5*02            [12]  840 	mov	a,_main_sloc1_1_0
      000131 F0               [24]  841 	movx	@dptr,a
      000132 E5*03            [12]  842 	mov	a,(_main_sloc1_1_0 + 1)
      000134 A3               [24]  843 	inc	dptr
      000135 F0               [24]  844 	movx	@dptr,a
                                    845 ;	main.c:111: heap[1].buffernumber=1;
      000136 90r12rC6         [24]  846 	mov	dptr,#(_heap + 0x0006)
      000139 74 01            [12]  847 	mov	a,#0x01
      00013B F0               [24]  848 	movx	@dptr,a
                                    849 ;	main.c:112: heap[1].bufferStartaddress=buffer1;
      00013C A8*00            [24]  850 	mov	r0,_main_sloc0_1_0
      00013E A9*01            [24]  851 	mov	r1,(_main_sloc0_1_0 + 1)
      000140 7B 00            [12]  852 	mov	r3,#0x00
      000142 90r12rC7         [24]  853 	mov	dptr,#(_heap + 0x0007)
      000145 E8               [12]  854 	mov	a,r0
      000146 F0               [24]  855 	movx	@dptr,a
      000147 E9               [12]  856 	mov	a,r1
      000148 A3               [24]  857 	inc	dptr
      000149 F0               [24]  858 	movx	@dptr,a
      00014A EB               [12]  859 	mov	a,r3
      00014B A3               [24]  860 	inc	dptr
      00014C F0               [24]  861 	movx	@dptr,a
                                    862 ;	main.c:113: heap[1].buffersize=total_size;
      00014D 90r12rCA         [24]  863 	mov	dptr,#(_heap + 0x000a)
      000150 E5*02            [12]  864 	mov	a,_main_sloc1_1_0
      000152 F0               [24]  865 	movx	@dptr,a
      000153 E5*03            [12]  866 	mov	a,(_main_sloc1_1_0 + 1)
      000155 A3               [24]  867 	inc	dptr
      000156 F0               [24]  868 	movx	@dptr,a
                                    869 ;	main.c:114: printf("Buffer0 at location %p has size %d\n\r", buffer0, total_size);
      000157 8C 02            [24]  870 	mov	ar2,r4
      000159 8D 03            [24]  871 	mov	ar3,r5
      00015B 8B 01            [24]  872 	mov	ar1,r3
      00015D 7B 00            [12]  873 	mov	r3,#0x00
      00015F C0 07            [24]  874 	push	ar7
      000161 C0 06            [24]  875 	push	ar6
      000163 C0 06            [24]  876 	push	ar6
      000165 C0 07            [24]  877 	push	ar7
      000167 C0 02            [24]  878 	push	ar2
      000169 C0 01            [24]  879 	push	ar1
      00016B C0 03            [24]  880 	push	ar3
      00016D 74r16            [12]  881 	mov	a,#___str_9
      00016F C0 E0            [24]  882 	push	acc
      000171 74s00            [12]  883 	mov	a,#(___str_9 >> 8)
      000173 C0 E0            [24]  884 	push	acc
      000175 74 80            [12]  885 	mov	a,#0x80
      000177 C0 E0            [24]  886 	push	acc
      000179 12r00r00         [24]  887 	lcall	_printf
      00017C E5 81            [12]  888 	mov	a,sp
      00017E 24 F8            [12]  889 	add	a,#0xf8
      000180 F5 81            [12]  890 	mov	sp,a
      000182 D0 06            [24]  891 	pop	ar6
      000184 D0 07            [24]  892 	pop	ar7
                                    893 ;	main.c:115: printf("Buffer1 at location %p has size %d\n\r", buffer1, total_size);
      000186 AA*00            [24]  894 	mov	r2,_main_sloc0_1_0
      000188 A9*01            [24]  895 	mov	r1,(_main_sloc0_1_0 + 1)
      00018A 7B 00            [12]  896 	mov	r3,#0x00
      00018C C0 06            [24]  897 	push	ar6
      00018E C0 07            [24]  898 	push	ar7
      000190 C0 02            [24]  899 	push	ar2
      000192 C0 01            [24]  900 	push	ar1
      000194 C0 03            [24]  901 	push	ar3
      000196 74r3B            [12]  902 	mov	a,#___str_10
      000198 C0 E0            [24]  903 	push	acc
      00019A 74s00            [12]  904 	mov	a,#(___str_10 >> 8)
      00019C C0 E0            [24]  905 	push	acc
      00019E 74 80            [12]  906 	mov	a,#0x80
      0001A0 C0 E0            [24]  907 	push	acc
      0001A2 12r00r00         [24]  908 	lcall	_printf
      0001A5 E5 81            [12]  909 	mov	a,sp
      0001A7 24 F8            [12]  910 	add	a,#0xf8
      0001A9 F5 81            [12]  911 	mov	sp,a
                                    912 ;	main.c:116: DEBUGPORT(0x55);                                                  /*virtual debug port*/
      0001AB 75 82 55         [24]  913 	mov	dpl,#0x55
      0001AE 12r0Ar8F         [24]  914 	lcall	_dataout
      0001B1 02r00r31         [24]  915 	ljmp	00162$
      0001B4                        916 00105$:
                                    917 ;	main.c:120: if (buffer0==NULL || buffer1==NULL){                               /*if buffer is not initialized, free the memory*/
      0001B4 EC               [12]  918 	mov	a,r4
      0001B5 4D               [12]  919 	orl	a,r5
      0001B6 60 06            [24]  920 	jz	00101$
      0001B8 E5*00            [12]  921 	mov	a,_main_sloc0_1_0
      0001BA 45*01            [12]  922 	orl	a,(_main_sloc0_1_0 + 1)
      0001BC 70 28            [24]  923 	jnz	00102$
      0001BE                        924 00101$:
                                    925 ;	main.c:121: free(buffer0);
      0001BE 7F 00            [12]  926 	mov	r7,#0x00
      0001C0 8C 82            [24]  927 	mov	dpl,r4
      0001C2 8D 83            [24]  928 	mov	dph,r5
      0001C4 8F F0            [24]  929 	mov	b,r7
      0001C6 12r00r00         [24]  930 	lcall	_free
                                    931 ;	main.c:122: free(buffer1);
      0001C9 AE*00            [24]  932 	mov	r6,_main_sloc0_1_0
      0001CB AF*01            [24]  933 	mov	r7,(_main_sloc0_1_0 + 1)
      0001CD 7D 00            [12]  934 	mov	r5,#0x00
      0001CF 8E 82            [24]  935 	mov	dpl,r6
      0001D1 8F 83            [24]  936 	mov	dph,r7
      0001D3 8D F0            [24]  937 	mov	b,r5
      0001D5 12r00r00         [24]  938 	lcall	_free
                                    939 ;	main.c:123: isFlag=0;
      0001D8 90r13rC1         [24]  940 	mov	dptr,#_main_isFlag_65536_51
      0001DB E4               [12]  941 	clr	a
      0001DC F0               [24]  942 	movx	@dptr,a
                                    943 ;	main.c:124: puts("FAILING HERE");
      0001DD 90r00r60         [24]  944 	mov	dptr,#___str_11
      0001E0 75 F0 80         [24]  945 	mov	b,#0x80
      0001E3 12r00r00         [24]  946 	lcall	_puts
      0001E6                        947 00102$:
                                    948 ;	main.c:126: puts("buffer0 & buffer1 not initialized\n\r");
      0001E6 90r00r6D         [24]  949 	mov	dptr,#___str_12
      0001E9 75 F0 80         [24]  950 	mov	b,#0x80
      0001EC 12r00r00         [24]  951 	lcall	_puts
      0001EF 02r00r31         [24]  952 	ljmp	00162$
      0001F2                        953 00159$:
                                    954 ;	main.c:131: puts("<<Enter command for operation>>\n\r");
      0001F2 90r00r91         [24]  955 	mov	dptr,#___str_13
      0001F5 75 F0 80         [24]  956 	mov	b,#0x80
      0001F8 12r00r00         [24]  957 	lcall	_puts
                                    958 ;	main.c:132: getstr(character);
      0001FB 90r13rC4         [24]  959 	mov	dptr,#_main_character_65536_51
      0001FE 75 F0 00         [24]  960 	mov	b,#0x00
      000201 12r0Dr12         [24]  961 	lcall	_getstr
                                    962 ;	main.c:133: numOfCharactersReceived++;
      000204 90r13rE2         [24]  963 	mov	dptr,#_main_numOfCharactersReceived_65536_51
      000207 E0               [24]  964 	movx	a,@dptr
      000208 24 01            [12]  965 	add	a,#0x01
      00020A F0               [24]  966 	movx	@dptr,a
      00020B A3               [24]  967 	inc	dptr
      00020C E0               [24]  968 	movx	a,@dptr
      00020D 34 00            [12]  969 	addc	a,#0x00
      00020F F0               [24]  970 	movx	@dptr,a
                                    971 ;	main.c:134: if ((character[0] >= 'A') && (character[0] <= 'Z')){                               /*if storage characters are received*/
      000210 90r13rC4         [24]  972 	mov	dptr,#_main_character_65536_51
      000213 E0               [24]  973 	movx	a,@dptr
      000214 FF               [12]  974 	mov	r7,a
      000215 BF 41 00         [24]  975 	cjne	r7,#0x41,00334$
      000218                        976 00334$:
      000218 50 03            [24]  977 	jnc	00335$
      00021A 02r02rB1         [24]  978 	ljmp	00155$
      00021D                        979 00335$:
      00021D EF               [12]  980 	mov	a,r7
      00021E 24 A5            [12]  981 	add	a,#0xff - 0x5a
      000220 50 03            [24]  982 	jnc	00336$
      000222 02r02rB1         [24]  983 	ljmp	00155$
      000225                        984 00336$:
                                    985 ;	main.c:135: puts("storage character entered\n\r");
      000225 90r00rB3         [24]  986 	mov	dptr,#___str_14
      000228 75 F0 80         [24]  987 	mov	b,#0x80
      00022B 12r00r00         [24]  988 	lcall	_puts
                                    989 ;	main.c:136: if (buffer0ptr<total_size){
      00022E 90r13rC9         [24]  990 	mov	dptr,#_main_buffer0ptr_65536_51
      000231 E0               [24]  991 	movx	a,@dptr
      000232 FE               [12]  992 	mov	r6,a
      000233 A3               [24]  993 	inc	dptr
      000234 E0               [24]  994 	movx	a,@dptr
      000235 FF               [12]  995 	mov	r7,a
      000236 90r13rC2         [24]  996 	mov	dptr,#_main_total_size_65536_51
      000239 E0               [24]  997 	movx	a,@dptr
      00023A FC               [12]  998 	mov	r4,a
      00023B A3               [24]  999 	inc	dptr
      00023C E0               [24] 1000 	movx	a,@dptr
      00023D FD               [12] 1001 	mov	r5,a
      00023E 8E 02            [24] 1002 	mov	ar2,r6
      000240 8F 03            [24] 1003 	mov	ar3,r7
      000242 C3               [12] 1004 	clr	c
      000243 EA               [12] 1005 	mov	a,r2
      000244 9C               [12] 1006 	subb	a,r4
      000245 EB               [12] 1007 	mov	a,r3
      000246 9D               [12] 1008 	subb	a,r5
      000247 50 3C            [24] 1009 	jnc	00113$
                                   1010 ;	main.c:137: buffer0[buffer0ptr]=character[0];                                           /*hold the storage character in buffer0*/
      000249 90r13r74         [24] 1011 	mov	dptr,#_main_buffer0_65536_51
      00024C E0               [24] 1012 	movx	a,@dptr
      00024D FC               [12] 1013 	mov	r4,a
      00024E A3               [24] 1014 	inc	dptr
      00024F E0               [24] 1015 	movx	a,@dptr
      000250 FD               [12] 1016 	mov	r5,a
      000251 EE               [12] 1017 	mov	a,r6
      000252 2E               [12] 1018 	add	a,r6
      000253 FA               [12] 1019 	mov	r2,a
      000254 EF               [12] 1020 	mov	a,r7
      000255 33               [12] 1021 	rlc	a
      000256 FB               [12] 1022 	mov	r3,a
      000257 EA               [12] 1023 	mov	a,r2
      000258 2C               [12] 1024 	add	a,r4
      000259 FC               [12] 1025 	mov	r4,a
      00025A EB               [12] 1026 	mov	a,r3
      00025B 3D               [12] 1027 	addc	a,r5
      00025C FD               [12] 1028 	mov	r5,a
      00025D 90r13rC4         [24] 1029 	mov	dptr,#_main_character_65536_51
      000260 E0               [24] 1030 	movx	a,@dptr
      000261 FB               [12] 1031 	mov	r3,a
      000262 7A 00            [12] 1032 	mov	r2,#0x00
      000264 8C 82            [24] 1033 	mov	dpl,r4
      000266 8D 83            [24] 1034 	mov	dph,r5
      000268 EB               [12] 1035 	mov	a,r3
      000269 F0               [24] 1036 	movx	@dptr,a
      00026A EA               [12] 1037 	mov	a,r2
      00026B A3               [24] 1038 	inc	dptr
      00026C F0               [24] 1039 	movx	@dptr,a
                                   1040 ;	main.c:138: buffer0ptr++;                                                               /*increment buffer0 pointer and current size*/
      00026D 90r13rC9         [24] 1041 	mov	dptr,#_main_buffer0ptr_65536_51
      000270 04               [12] 1042 	inc	a
      000271 2E               [12] 1043 	add	a,r6
      000272 F0               [24] 1044 	movx	@dptr,a
      000273 E4               [12] 1045 	clr	a
      000274 3F               [12] 1046 	addc	a,r7
      000275 A3               [24] 1047 	inc	dptr
      000276 F0               [24] 1048 	movx	@dptr,a
                                   1049 ;	main.c:139: buffer0CurrentSize++;
      000277 90r13rCB         [24] 1050 	mov	dptr,#_main_buffer0CurrentSize_65536_51
      00027A E0               [24] 1051 	movx	a,@dptr
      00027B 24 01            [12] 1052 	add	a,#0x01
      00027D F0               [24] 1053 	movx	@dptr,a
      00027E A3               [24] 1054 	inc	dptr
      00027F E0               [24] 1055 	movx	a,@dptr
      000280 34 00            [12] 1056 	addc	a,#0x00
      000282 F0               [24] 1057 	movx	@dptr,a
      000283 80 09            [24] 1058 	sjmp	00114$
      000285                       1059 00113$:
                                   1060 ;	main.c:142: puts("no space in buffer0");                                                /*storage limit reached in buffer0*/
      000285 90r00rCF         [24] 1061 	mov	dptr,#___str_15
      000288 75 F0 80         [24] 1062 	mov	b,#0x80
      00028B 12r00r00         [24] 1063 	lcall	_puts
      00028E                       1064 00114$:
                                   1065 ;	main.c:144: printf_small("storage character received= %c \n\r", character[0]);
      00028E 90r13rC4         [24] 1066 	mov	dptr,#_main_character_65536_51
      000291 E0               [24] 1067 	movx	a,@dptr
      000292 FF               [12] 1068 	mov	r7,a
      000293 7E 00            [12] 1069 	mov	r6,#0x00
      000295 C0 07            [24] 1070 	push	ar7
      000297 C0 06            [24] 1071 	push	ar6
      000299 74rE3            [12] 1072 	mov	a,#___str_16
      00029B C0 E0            [24] 1073 	push	acc
      00029D 74s00            [12] 1074 	mov	a,#(___str_16 >> 8)
      00029F C0 E0            [24] 1075 	push	acc
      0002A1 74 80            [12] 1076 	mov	a,#0x80
      0002A3 C0 E0            [24] 1077 	push	acc
      0002A5 12r00r00         [24] 1078 	lcall	_printf_small
      0002A8 E5 81            [12] 1079 	mov	a,sp
      0002AA 24 FB            [12] 1080 	add	a,#0xfb
      0002AC F5 81            [12] 1081 	mov	sp,a
      0002AE 02r00r31         [24] 1082 	ljmp	00162$
      0002B1                       1083 00155$:
                                   1084 ;	main.c:147: else if(character[0]=='+'){                                    /*condition to create new buffer*/
      0002B1 90r13rC4         [24] 1085 	mov	dptr,#_main_character_65536_51
      0002B4 E0               [24] 1086 	movx	a,@dptr
      0002B5 FF               [12] 1087 	mov	r7,a
      0002B6 BF 2B 02         [24] 1088 	cjne	r7,#0x2b,00338$
      0002B9 80 03            [24] 1089 	sjmp	00339$
      0002BB                       1090 00338$:
      0002BB 02r04r1F         [24] 1091 	ljmp	00152$
      0002BE                       1092 00339$:
                                   1093 ;	main.c:149: puts("Enter no of bytes between 30 & 300\n\r");
      0002BE 90r05r40         [24] 1094 	mov	dptr,#___str_54
      0002C1 75 F0 80         [24] 1095 	mov	b,#0x80
      0002C4 12r00r00         [24] 1096 	lcall	_puts
                                   1097 ;	main.c:150: getstr(newBuffersize);
      0002C7 90r13rCD         [24] 1098 	mov	dptr,#_main_newBuffersize_65536_51
      0002CA 75 F0 00         [24] 1099 	mov	b,#0x00
      0002CD 12r0Dr12         [24] 1100 	lcall	_getstr
                                   1101 ;	main.c:151: newbuffersizeint=atoi(newBuffersize);                          /*converts the received buffer size to int*/
      0002D0 90r13rCD         [24] 1102 	mov	dptr,#_main_newBuffersize_65536_51
      0002D3 75 F0 00         [24] 1103 	mov	b,#0x00
      0002D6 12r00r00         [24] 1104 	lcall	_atoi
      0002D9 AD 82            [24] 1105 	mov	r5,dpl
      0002DB AE 83            [24] 1106 	mov	r6,dph
                                   1107 ;	main.c:152: DEBUGPORT(44);                                                 /*virtual debug port*/
      0002DD 75 82 2C         [24] 1108 	mov	dpl,#0x2c
      0002E0 C0 06            [24] 1109 	push	ar6
      0002E2 C0 05            [24] 1110 	push	ar5
      0002E4 12r0Ar8F         [24] 1111 	lcall	_dataout
      0002E7 D0 05            [24] 1112 	pop	ar5
      0002E9 D0 06            [24] 1113 	pop	ar6
                                   1114 ;	main.c:153: if (newbuffersizeint>29 && newbuffersizeint<301){
      0002EB C3               [12] 1115 	clr	c
      0002EC 74 1D            [12] 1116 	mov	a,#0x1d
      0002EE 9D               [12] 1117 	subb	a,r5
      0002EF 74 80            [12] 1118 	mov	a,#(0x00 ^ 0x80)
      0002F1 8E F0            [24] 1119 	mov	b,r6
      0002F3 63 F0 80         [24] 1120 	xrl	b,#0x80
      0002F6 95 F0            [12] 1121 	subb	a,b
      0002F8 40 03            [24] 1122 	jc	00340$
      0002FA 02r04r13         [24] 1123 	ljmp	00121$
      0002FD                       1124 00340$:
      0002FD C3               [12] 1125 	clr	c
      0002FE ED               [12] 1126 	mov	a,r5
      0002FF 94 2D            [12] 1127 	subb	a,#0x2d
      000301 EE               [12] 1128 	mov	a,r6
      000302 64 80            [12] 1129 	xrl	a,#0x80
      000304 94 81            [12] 1130 	subb	a,#0x81
      000306 40 03            [24] 1131 	jc	00341$
      000308 02r04r13         [24] 1132 	ljmp	00121$
      00030B                       1133 00341$:
                                   1134 ;	main.c:154: if (newBufferscount<50){
      00030B 90r13rD7         [24] 1135 	mov	dptr,#_main_newBufferscount_65536_51
      00030E E0               [24] 1136 	movx	a,@dptr
      00030F FC               [12] 1137 	mov	r4,a
      000310 BC 32 00         [24] 1138 	cjne	r4,#0x32,00342$
      000313                       1139 00342$:
      000313 40 03            [24] 1140 	jc	00343$
      000315 02r04r07         [24] 1141 	ljmp	00118$
      000318                       1142 00343$:
                                   1143 ;	main.c:155: newbuffers[newBufferscount]=malloc(newbuffersizeint);       /*malloc new buffers array with received size */
      000318 EC               [12] 1144 	mov	a,r4
      000319 75 F0 03         [24] 1145 	mov	b,#0x03
      00031C A4               [48] 1146 	mul	ab
      00031D 24r76            [12] 1147 	add	a,#_main_newbuffers_65536_51
      00031F F5*02            [12] 1148 	mov	_main_sloc1_1_0,a
      000321 74s13            [12] 1149 	mov	a,#(_main_newbuffers_65536_51 >> 8)
      000323 35 F0            [12] 1150 	addc	a,b
      000325 F5*03            [12] 1151 	mov	(_main_sloc1_1_0 + 1),a
      000327 8D 82            [24] 1152 	mov	dpl,r5
      000329 8E 83            [24] 1153 	mov	dph,r6
      00032B C0 06            [24] 1154 	push	ar6
      00032D C0 05            [24] 1155 	push	ar5
      00032F C0 04            [24] 1156 	push	ar4
      000331 12r00r00         [24] 1157 	lcall	_malloc
      000334 A8 82            [24] 1158 	mov	r0,dpl
      000336 A9 83            [24] 1159 	mov	r1,dph
      000338 D0 04            [24] 1160 	pop	ar4
      00033A D0 05            [24] 1161 	pop	ar5
      00033C D0 06            [24] 1162 	pop	ar6
      00033E 7B 00            [12] 1163 	mov	r3,#0x00
      000340 85*02 82         [24] 1164 	mov	dpl,_main_sloc1_1_0
      000343 85*03 83         [24] 1165 	mov	dph,(_main_sloc1_1_0 + 1)
      000346 E8               [12] 1166 	mov	a,r0
      000347 F0               [24] 1167 	movx	@dptr,a
      000348 E9               [12] 1168 	mov	a,r1
      000349 A3               [24] 1169 	inc	dptr
      00034A F0               [24] 1170 	movx	@dptr,a
      00034B EB               [12] 1171 	mov	a,r3
      00034C A3               [24] 1172 	inc	dptr
      00034D F0               [24] 1173 	movx	@dptr,a
                                   1174 ;	main.c:156: if (newbuffers[newBufferscount]!=NULL){
      00034E E8               [12] 1175 	mov	a,r0
      00034F 49               [12] 1176 	orl	a,r1
      000350 70 03            [24] 1177 	jnz	00344$
      000352 02r00r31         [24] 1178 	ljmp	00162$
      000355                       1179 00344$:
                                   1180 ;	main.c:157: printf("new buffer%d at location %p has size %d\n\r",(newBufferscount+2), newbuffers[newBufferscount], newbuffersizeint);
      000355 85*02 82         [24] 1181 	mov	dpl,_main_sloc1_1_0
      000358 85*03 83         [24] 1182 	mov	dph,(_main_sloc1_1_0 + 1)
      00035B E0               [24] 1183 	movx	a,@dptr
      00035C F5*04            [12] 1184 	mov	_main_sloc2_1_0,a
      00035E A3               [24] 1185 	inc	dptr
      00035F E0               [24] 1186 	movx	a,@dptr
      000360 F5*05            [12] 1187 	mov	(_main_sloc2_1_0 + 1),a
      000362 A3               [24] 1188 	inc	dptr
      000363 E0               [24] 1189 	movx	a,@dptr
      000364 F5*06            [12] 1190 	mov	(_main_sloc2_1_0 + 2),a
      000366 8C 00            [24] 1191 	mov	ar0,r4
      000368 7B 00            [12] 1192 	mov	r3,#0x00
      00036A 74 02            [12] 1193 	mov	a,#0x02
      00036C 28               [12] 1194 	add	a,r0
      00036D F8               [12] 1195 	mov	r0,a
      00036E E4               [12] 1196 	clr	a
      00036F 3B               [12] 1197 	addc	a,r3
      000370 FB               [12] 1198 	mov	r3,a
      000371 C0 06            [24] 1199 	push	ar6
      000373 C0 05            [24] 1200 	push	ar5
      000375 C0 04            [24] 1201 	push	ar4
      000377 C0 03            [24] 1202 	push	ar3
      000379 C0 00            [24] 1203 	push	ar0
      00037B C0 05            [24] 1204 	push	ar5
      00037D C0 06            [24] 1205 	push	ar6
      00037F C0*04            [24] 1206 	push	_main_sloc2_1_0
      000381 C0*05            [24] 1207 	push	(_main_sloc2_1_0 + 1)
      000383 C0*06            [24] 1208 	push	(_main_sloc2_1_0 + 2)
      000385 C0 00            [24] 1209 	push	ar0
      000387 C0 03            [24] 1210 	push	ar3
      000389 74r05            [12] 1211 	mov	a,#___str_19
      00038B C0 E0            [24] 1212 	push	acc
      00038D 74s01            [12] 1213 	mov	a,#(___str_19 >> 8)
      00038F C0 E0            [24] 1214 	push	acc
      000391 74 80            [12] 1215 	mov	a,#0x80
      000393 C0 E0            [24] 1216 	push	acc
      000395 12r00r00         [24] 1217 	lcall	_printf
      000398 E5 81            [12] 1218 	mov	a,sp
      00039A 24 F6            [12] 1219 	add	a,#0xf6
      00039C F5 81            [12] 1220 	mov	sp,a
      00039E D0 00            [24] 1221 	pop	ar0
      0003A0 D0 03            [24] 1222 	pop	ar3
                                   1223 ;	main.c:158: heap[newBufferscount+2].buffernumber=newBufferscount+2;
      0003A2 90r00r00         [24] 1224 	mov	dptr,#__mulint_PARM_2
      0003A5 E8               [12] 1225 	mov	a,r0
      0003A6 F0               [24] 1226 	movx	@dptr,a
      0003A7 EB               [12] 1227 	mov	a,r3
      0003A8 A3               [24] 1228 	inc	dptr
      0003A9 F0               [24] 1229 	movx	@dptr,a
      0003AA 90 00 06         [24] 1230 	mov	dptr,#0x0006
      0003AD 12r00r00         [24] 1231 	lcall	__mulint
      0003B0 AA 82            [24] 1232 	mov	r2,dpl
      0003B2 AB 83            [24] 1233 	mov	r3,dph
      0003B4 D0 04            [24] 1234 	pop	ar4
      0003B6 D0 05            [24] 1235 	pop	ar5
      0003B8 D0 06            [24] 1236 	pop	ar6
      0003BA EA               [12] 1237 	mov	a,r2
      0003BB 24rC0            [12] 1238 	add	a,#_heap
      0003BD F5 82            [12] 1239 	mov	dpl,a
      0003BF EB               [12] 1240 	mov	a,r3
      0003C0 34s12            [12] 1241 	addc	a,#(_heap >> 8)
      0003C2 F5 83            [12] 1242 	mov	dph,a
      0003C4 8C 01            [24] 1243 	mov	ar1,r4
      0003C6 09               [12] 1244 	inc	r1
      0003C7 09               [12] 1245 	inc	r1
      0003C8 E9               [12] 1246 	mov	a,r1
      0003C9 F0               [24] 1247 	movx	@dptr,a
                                   1248 ;	main.c:159: heap[newBufferscount+2].buffersize=newbuffersizeint;                        /*hold the buffer information in heap array structure*/
      0003CA EA               [12] 1249 	mov	a,r2
      0003CB 24rC0            [12] 1250 	add	a,#_heap
      0003CD FA               [12] 1251 	mov	r2,a
      0003CE EB               [12] 1252 	mov	a,r3
      0003CF 34s12            [12] 1253 	addc	a,#(_heap >> 8)
      0003D1 FB               [12] 1254 	mov	r3,a
      0003D2 8A 82            [24] 1255 	mov	dpl,r2
      0003D4 8B 83            [24] 1256 	mov	dph,r3
      0003D6 A3               [24] 1257 	inc	dptr
      0003D7 A3               [24] 1258 	inc	dptr
      0003D8 A3               [24] 1259 	inc	dptr
      0003D9 A3               [24] 1260 	inc	dptr
      0003DA ED               [12] 1261 	mov	a,r5
      0003DB F0               [24] 1262 	movx	@dptr,a
      0003DC EE               [12] 1263 	mov	a,r6
      0003DD A3               [24] 1264 	inc	dptr
      0003DE F0               [24] 1265 	movx	@dptr,a
                                   1266 ;	main.c:160: heap[newBufferscount+2].bufferStartaddress=newbuffers[newBufferscount];
      0003DF 0A               [12] 1267 	inc	r2
      0003E0 BA 00 01         [24] 1268 	cjne	r2,#0x00,00345$
      0003E3 0B               [12] 1269 	inc	r3
      0003E4                       1270 00345$:
      0003E4 85*02 82         [24] 1271 	mov	dpl,_main_sloc1_1_0
      0003E7 85*03 83         [24] 1272 	mov	dph,(_main_sloc1_1_0 + 1)
      0003EA E0               [24] 1273 	movx	a,@dptr
      0003EB F9               [12] 1274 	mov	r1,a
      0003EC A3               [24] 1275 	inc	dptr
      0003ED E0               [24] 1276 	movx	a,@dptr
      0003EE FD               [12] 1277 	mov	r5,a
      0003EF A3               [24] 1278 	inc	dptr
      0003F0 E0               [24] 1279 	movx	a,@dptr
      0003F1 FE               [12] 1280 	mov	r6,a
      0003F2 8A 82            [24] 1281 	mov	dpl,r2
      0003F4 8B 83            [24] 1282 	mov	dph,r3
      0003F6 E9               [12] 1283 	mov	a,r1
      0003F7 F0               [24] 1284 	movx	@dptr,a
      0003F8 ED               [12] 1285 	mov	a,r5
      0003F9 A3               [24] 1286 	inc	dptr
      0003FA F0               [24] 1287 	movx	@dptr,a
      0003FB EE               [12] 1288 	mov	a,r6
      0003FC A3               [24] 1289 	inc	dptr
      0003FD F0               [24] 1290 	movx	@dptr,a
                                   1291 ;	main.c:161: newBufferscount++;                                    /*increment buffers count*/
      0003FE 90r13rD7         [24] 1292 	mov	dptr,#_main_newBufferscount_65536_51
      000401 EC               [12] 1293 	mov	a,r4
      000402 04               [12] 1294 	inc	a
      000403 F0               [24] 1295 	movx	@dptr,a
      000404 02r00r31         [24] 1296 	ljmp	00162$
      000407                       1297 00118$:
                                   1298 ;	main.c:165: puts("Allocation limit reached\n\r");
      000407 90r01r2F         [24] 1299 	mov	dptr,#___str_20
      00040A 75 F0 80         [24] 1300 	mov	b,#0x80
      00040D 12r00r00         [24] 1301 	lcall	_puts
      000410 02r00r31         [24] 1302 	ljmp	00162$
      000413                       1303 00121$:
                                   1304 ;	main.c:169: puts("Enter buffer size between 30 & 300\n\r");                         /*requests to enter appropriate size*/
      000413 90r01r4A         [24] 1305 	mov	dptr,#___str_21
      000416 75 F0 80         [24] 1306 	mov	b,#0x80
      000419 12r00r00         [24] 1307 	lcall	_puts
      00041C 02r00r31         [24] 1308 	ljmp	00162$
      00041F                       1309 00152$:
                                   1310 ;	main.c:173: else if(character[0]=='-'){                                       /*condition to delete buffer*/
      00041F BF 2D 02         [24] 1311 	cjne	r7,#0x2d,00346$
      000422 80 03            [24] 1312 	sjmp	00347$
      000424                       1313 00346$:
      000424 02r05r02         [24] 1314 	ljmp	00149$
      000427                       1315 00347$:
                                   1316 ;	main.c:175: puts("Enter the buffer number to be deleted \n\r");
      000427 90r05r7A         [24] 1317 	mov	dptr,#___str_55
      00042A 75 F0 80         [24] 1318 	mov	b,#0x80
      00042D 12r00r00         [24] 1319 	lcall	_puts
                                   1320 ;	main.c:176: getstr(deleteBufferNumber);
      000430 90r13rD8         [24] 1321 	mov	dptr,#_main_deleteBufferNumber_65536_51
      000433 75 F0 00         [24] 1322 	mov	b,#0x00
      000436 12r0Dr12         [24] 1323 	lcall	_getstr
                                   1324 ;	main.c:177: deleteBufferNumberint=atoi(deleteBufferNumber);
      000439 90r13rD8         [24] 1325 	mov	dptr,#_main_deleteBufferNumber_65536_51
      00043C 75 F0 00         [24] 1326 	mov	b,#0x00
      00043F 12r00r00         [24] 1327 	lcall	_atoi
      000442 AD 82            [24] 1328 	mov	r5,dpl
      000444 AE 83            [24] 1329 	mov	r6,dph
                                   1330 ;	main.c:179: if(deleteBufferNumberint==0){
      000446 ED               [12] 1331 	mov	a,r5
      000447 4E               [12] 1332 	orl	a,r6
      000448 70 11            [24] 1333 	jnz	00125$
                                   1334 ;	main.c:180: puts("Cannot delete buffer0 \n\r");
      00044A 90r01r6F         [24] 1335 	mov	dptr,#___str_24
      00044D 75 F0 80         [24] 1336 	mov	b,#0x80
      000450 C0 06            [24] 1337 	push	ar6
      000452 C0 05            [24] 1338 	push	ar5
      000454 12r00r00         [24] 1339 	lcall	_puts
      000457 D0 05            [24] 1340 	pop	ar5
      000459 D0 06            [24] 1341 	pop	ar6
      00045B                       1342 00125$:
                                   1343 ;	main.c:183: free(heap[deleteBufferNumberint].bufferStartaddress);           /*free the deleted buffer start address*/
      00045B 90r00r00         [24] 1344 	mov	dptr,#__mulint_PARM_2
      00045E ED               [12] 1345 	mov	a,r5
      00045F F0               [24] 1346 	movx	@dptr,a
      000460 EE               [12] 1347 	mov	a,r6
      000461 A3               [24] 1348 	inc	dptr
      000462 F0               [24] 1349 	movx	@dptr,a
      000463 90 00 06         [24] 1350 	mov	dptr,#0x0006
      000466 C0 06            [24] 1351 	push	ar6
      000468 C0 05            [24] 1352 	push	ar5
      00046A 12r00r00         [24] 1353 	lcall	__mulint
      00046D AB 82            [24] 1354 	mov	r3,dpl
      00046F AC 83            [24] 1355 	mov	r4,dph
      000471 EB               [12] 1356 	mov	a,r3
      000472 24rC0            [12] 1357 	add	a,#_heap
      000474 FB               [12] 1358 	mov	r3,a
      000475 EC               [12] 1359 	mov	a,r4
      000476 34s12            [12] 1360 	addc	a,#(_heap >> 8)
      000478 FC               [12] 1361 	mov	r4,a
      000479 74 01            [12] 1362 	mov	a,#0x01
      00047B 2B               [12] 1363 	add	a,r3
      00047C F5*04            [12] 1364 	mov	_main_sloc2_1_0,a
      00047E E4               [12] 1365 	clr	a
      00047F 3C               [12] 1366 	addc	a,r4
      000480 F5*05            [12] 1367 	mov	(_main_sloc2_1_0 + 1),a
      000482 85*04 82         [24] 1368 	mov	dpl,_main_sloc2_1_0
      000485 85*05 83         [24] 1369 	mov	dph,(_main_sloc2_1_0 + 1)
      000488 E0               [24] 1370 	movx	a,@dptr
      000489 F8               [12] 1371 	mov	r0,a
      00048A A3               [24] 1372 	inc	dptr
      00048B E0               [24] 1373 	movx	a,@dptr
      00048C F9               [12] 1374 	mov	r1,a
      00048D A3               [24] 1375 	inc	dptr
      00048E E0               [24] 1376 	movx	a,@dptr
      00048F FA               [12] 1377 	mov	r2,a
      000490 88 82            [24] 1378 	mov	dpl,r0
      000492 89 83            [24] 1379 	mov	dph,r1
      000494 8A F0            [24] 1380 	mov	b,r2
      000496 C0 04            [24] 1381 	push	ar4
      000498 C0 03            [24] 1382 	push	ar3
      00049A 12r00r00         [24] 1383 	lcall	_free
      00049D D0 03            [24] 1384 	pop	ar3
      00049F D0 04            [24] 1385 	pop	ar4
                                   1386 ;	main.c:184: heap[deleteBufferNumberint].buffersize=0;                       /*clear out information held in heap*/
      0004A1 74 04            [12] 1387 	mov	a,#0x04
      0004A3 2B               [12] 1388 	add	a,r3
      0004A4 F9               [12] 1389 	mov	r1,a
      0004A5 E4               [12] 1390 	clr	a
      0004A6 3C               [12] 1391 	addc	a,r4
      0004A7 FA               [12] 1392 	mov	r2,a
      0004A8 89 82            [24] 1393 	mov	dpl,r1
      0004AA 8A 83            [24] 1394 	mov	dph,r2
      0004AC E4               [12] 1395 	clr	a
      0004AD F0               [24] 1396 	movx	@dptr,a
      0004AE A3               [24] 1397 	inc	dptr
      0004AF F0               [24] 1398 	movx	@dptr,a
                                   1399 ;	main.c:185: heap[deleteBufferNumberint].buffernumber=0;
      0004B0 8B 82            [24] 1400 	mov	dpl,r3
      0004B2 8C 83            [24] 1401 	mov	dph,r4
      0004B4 F0               [24] 1402 	movx	@dptr,a
                                   1403 ;	main.c:186: heap[deleteBufferNumberint].bufferStartaddress=NULL;
      0004B5 85*04 82         [24] 1404 	mov	dpl,_main_sloc2_1_0
      0004B8 85*05 83         [24] 1405 	mov	dph,(_main_sloc2_1_0 + 1)
      0004BB F0               [24] 1406 	movx	@dptr,a
      0004BC A3               [24] 1407 	inc	dptr
      0004BD F0               [24] 1408 	movx	@dptr,a
      0004BE A3               [24] 1409 	inc	dptr
      0004BF F0               [24] 1410 	movx	@dptr,a
                                   1411 ;	main.c:187: printf("Size of deleted Buffer %d", heap[deleteBufferNumberint].buffersize);
      0004C0 89 82            [24] 1412 	mov	dpl,r1
      0004C2 8A 83            [24] 1413 	mov	dph,r2
      0004C4 E0               [24] 1414 	movx	a,@dptr
      0004C5 F9               [12] 1415 	mov	r1,a
      0004C6 A3               [24] 1416 	inc	dptr
      0004C7 E0               [24] 1417 	movx	a,@dptr
      0004C8 FA               [12] 1418 	mov	r2,a
      0004C9 C0 01            [24] 1419 	push	ar1
      0004CB C0 02            [24] 1420 	push	ar2
      0004CD 74r88            [12] 1421 	mov	a,#___str_25
      0004CF C0 E0            [24] 1422 	push	acc
      0004D1 74s01            [12] 1423 	mov	a,#(___str_25 >> 8)
      0004D3 C0 E0            [24] 1424 	push	acc
      0004D5 74 80            [12] 1425 	mov	a,#0x80
      0004D7 C0 E0            [24] 1426 	push	acc
      0004D9 12r00r00         [24] 1427 	lcall	_printf
      0004DC E5 81            [12] 1428 	mov	a,sp
      0004DE 24 FB            [12] 1429 	add	a,#0xfb
      0004E0 F5 81            [12] 1430 	mov	sp,a
      0004E2 D0 05            [24] 1431 	pop	ar5
      0004E4 D0 06            [24] 1432 	pop	ar6
                                   1433 ;	main.c:188: printf("Deleted the buffer %d \n\r", deleteBufferNumberint);
      0004E6 C0 05            [24] 1434 	push	ar5
      0004E8 C0 06            [24] 1435 	push	ar6
      0004EA 74rA2            [12] 1436 	mov	a,#___str_26
      0004EC C0 E0            [24] 1437 	push	acc
      0004EE 74s01            [12] 1438 	mov	a,#(___str_26 >> 8)
      0004F0 C0 E0            [24] 1439 	push	acc
      0004F2 74 80            [12] 1440 	mov	a,#0x80
      0004F4 C0 E0            [24] 1441 	push	acc
      0004F6 12r00r00         [24] 1442 	lcall	_printf
      0004F9 E5 81            [12] 1443 	mov	a,sp
      0004FB 24 FB            [12] 1444 	add	a,#0xfb
      0004FD F5 81            [12] 1445 	mov	sp,a
      0004FF 02r00r31         [24] 1446 	ljmp	00162$
      000502                       1447 00149$:
                                   1448 ;	main.c:191: else if(character[0]=='?'){                                            /*requests to buffer information*/
      000502 BF 3F 02         [24] 1449 	cjne	r7,#0x3f,00349$
      000505 80 03            [24] 1450 	sjmp	00350$
      000507                       1451 00349$:
      000507 02r09r04         [24] 1452 	ljmp	00146$
      00050A                       1453 00350$:
                                   1454 ;	main.c:192: puts("? Symbol received \n\r");
      00050A 90r01rBB         [24] 1455 	mov	dptr,#___str_27
      00050D 75 F0 80         [24] 1456 	mov	b,#0x80
      000510 12r00r00         [24] 1457 	lcall	_puts
                                   1458 ;	main.c:193: printf("Total number of characters received since last ?= %d \n\r", numOfCharactersReceived);
      000513 90r13rE2         [24] 1459 	mov	dptr,#_main_numOfCharactersReceived_65536_51
      000516 E0               [24] 1460 	movx	a,@dptr
      000517 C0 E0            [24] 1461 	push	acc
      000519 A3               [24] 1462 	inc	dptr
      00051A E0               [24] 1463 	movx	a,@dptr
      00051B C0 E0            [24] 1464 	push	acc
      00051D 74rD0            [12] 1465 	mov	a,#___str_28
      00051F C0 E0            [24] 1466 	push	acc
      000521 74s01            [12] 1467 	mov	a,#(___str_28 >> 8)
      000523 C0 E0            [24] 1468 	push	acc
      000525 74 80            [12] 1469 	mov	a,#0x80
      000527 C0 E0            [24] 1470 	push	acc
      000529 12r00r00         [24] 1471 	lcall	_printf
      00052C E5 81            [12] 1472 	mov	a,sp
      00052E 24 FB            [12] 1473 	add	a,#0xfb
      000530 F5 81            [12] 1474 	mov	sp,a
                                   1475 ;	main.c:194: printf("--------------------Buffer0 details------------------------\n\r");
      000532 74r08            [12] 1476 	mov	a,#___str_29
      000534 C0 E0            [24] 1477 	push	acc
      000536 74s02            [12] 1478 	mov	a,#(___str_29 >> 8)
      000538 C0 E0            [24] 1479 	push	acc
      00053A 74 80            [12] 1480 	mov	a,#0x80
      00053C C0 E0            [24] 1481 	push	acc
      00053E 12r00r00         [24] 1482 	lcall	_printf
      000541 15 81            [12] 1483 	dec	sp
      000543 15 81            [12] 1484 	dec	sp
      000545 15 81            [12] 1485 	dec	sp
                                   1486 ;	main.c:195: printf("Buffer number= %d \n\r", heap[0].buffernumber);                                     /*prints buffer0 information*/
      000547 90r12rC0         [24] 1487 	mov	dptr,#_heap
      00054A E0               [24] 1488 	movx	a,@dptr
      00054B FE               [12] 1489 	mov	r6,a
      00054C 7D 00            [12] 1490 	mov	r5,#0x00
      00054E C0 06            [24] 1491 	push	ar6
      000550 C0 05            [24] 1492 	push	ar5
      000552 74r46            [12] 1493 	mov	a,#___str_30
      000554 C0 E0            [24] 1494 	push	acc
      000556 74s02            [12] 1495 	mov	a,#(___str_30 >> 8)
      000558 C0 E0            [24] 1496 	push	acc
      00055A 74 80            [12] 1497 	mov	a,#0x80
      00055C C0 E0            [24] 1498 	push	acc
      00055E 12r00r00         [24] 1499 	lcall	_printf
      000561 E5 81            [12] 1500 	mov	a,sp
      000563 24 FB            [12] 1501 	add	a,#0xfb
      000565 F5 81            [12] 1502 	mov	sp,a
                                   1503 ;	main.c:196: printf("Buffer start address= %p \n\r", heap[0].bufferStartaddress);
      000567 90r12rC1         [24] 1504 	mov	dptr,#(_heap + 0x0001)
      00056A E0               [24] 1505 	movx	a,@dptr
      00056B FC               [12] 1506 	mov	r4,a
      00056C A3               [24] 1507 	inc	dptr
      00056D E0               [24] 1508 	movx	a,@dptr
      00056E FD               [12] 1509 	mov	r5,a
      00056F A3               [24] 1510 	inc	dptr
      000570 E0               [24] 1511 	movx	a,@dptr
      000571 FE               [12] 1512 	mov	r6,a
      000572 C0 04            [24] 1513 	push	ar4
      000574 C0 05            [24] 1514 	push	ar5
      000576 C0 06            [24] 1515 	push	ar6
      000578 74r5B            [12] 1516 	mov	a,#___str_31
      00057A C0 E0            [24] 1517 	push	acc
      00057C 74s02            [12] 1518 	mov	a,#(___str_31 >> 8)
      00057E C0 E0            [24] 1519 	push	acc
      000580 74 80            [12] 1520 	mov	a,#0x80
      000582 C0 E0            [24] 1521 	push	acc
      000584 12r00r00         [24] 1522 	lcall	_printf
      000587 E5 81            [12] 1523 	mov	a,sp
      000589 24 FA            [12] 1524 	add	a,#0xfa
      00058B F5 81            [12] 1525 	mov	sp,a
                                   1526 ;	main.c:197: printf("Buffer end address= %p \n\r", heap[0].bufferStartaddress+heap[0].buffersize/2);
      00058D 90r12rC1         [24] 1527 	mov	dptr,#(_heap + 0x0001)
      000590 E0               [24] 1528 	movx	a,@dptr
      000591 FC               [12] 1529 	mov	r4,a
      000592 A3               [24] 1530 	inc	dptr
      000593 E0               [24] 1531 	movx	a,@dptr
      000594 FD               [12] 1532 	mov	r5,a
      000595 A3               [24] 1533 	inc	dptr
      000596 E0               [24] 1534 	movx	a,@dptr
      000597 FE               [12] 1535 	mov	r6,a
      000598 90r12rC4         [24] 1536 	mov	dptr,#(_heap + 0x0004)
      00059B E0               [24] 1537 	movx	a,@dptr
      00059C FA               [12] 1538 	mov	r2,a
      00059D A3               [24] 1539 	inc	dptr
      00059E E0               [24] 1540 	movx	a,@dptr
      00059F C3               [12] 1541 	clr	c
      0005A0 13               [12] 1542 	rrc	a
      0005A1 CA               [12] 1543 	xch	a,r2
      0005A2 13               [12] 1544 	rrc	a
      0005A3 CA               [12] 1545 	xch	a,r2
      0005A4 FB               [12] 1546 	mov	r3,a
      0005A5 EA               [12] 1547 	mov	a,r2
      0005A6 2A               [12] 1548 	add	a,r2
      0005A7 FA               [12] 1549 	mov	r2,a
      0005A8 EB               [12] 1550 	mov	a,r3
      0005A9 33               [12] 1551 	rlc	a
      0005AA FB               [12] 1552 	mov	r3,a
      0005AB EA               [12] 1553 	mov	a,r2
      0005AC 2C               [12] 1554 	add	a,r4
      0005AD FC               [12] 1555 	mov	r4,a
      0005AE EB               [12] 1556 	mov	a,r3
      0005AF 3D               [12] 1557 	addc	a,r5
      0005B0 FD               [12] 1558 	mov	r5,a
      0005B1 C0 04            [24] 1559 	push	ar4
      0005B3 C0 05            [24] 1560 	push	ar5
      0005B5 C0 06            [24] 1561 	push	ar6
      0005B7 74r77            [12] 1562 	mov	a,#___str_32
      0005B9 C0 E0            [24] 1563 	push	acc
      0005BB 74s02            [12] 1564 	mov	a,#(___str_32 >> 8)
      0005BD C0 E0            [24] 1565 	push	acc
      0005BF 74 80            [12] 1566 	mov	a,#0x80
      0005C1 C0 E0            [24] 1567 	push	acc
      0005C3 12r00r00         [24] 1568 	lcall	_printf
      0005C6 E5 81            [12] 1569 	mov	a,sp
      0005C8 24 FA            [12] 1570 	add	a,#0xfa
      0005CA F5 81            [12] 1571 	mov	sp,a
                                   1572 ;	main.c:198: printf("Buffer size= %d \n\r", heap[0].buffersize);
      0005CC 90r12rC4         [24] 1573 	mov	dptr,#(_heap + 0x0004)
      0005CF E0               [24] 1574 	movx	a,@dptr
      0005D0 FD               [12] 1575 	mov	r5,a
      0005D1 A3               [24] 1576 	inc	dptr
      0005D2 E0               [24] 1577 	movx	a,@dptr
      0005D3 FE               [12] 1578 	mov	r6,a
      0005D4 C0 05            [24] 1579 	push	ar5
      0005D6 C0 06            [24] 1580 	push	ar6
      0005D8 74r91            [12] 1581 	mov	a,#___str_33
      0005DA C0 E0            [24] 1582 	push	acc
      0005DC 74s02            [12] 1583 	mov	a,#(___str_33 >> 8)
      0005DE C0 E0            [24] 1584 	push	acc
      0005E0 74 80            [12] 1585 	mov	a,#0x80
      0005E2 C0 E0            [24] 1586 	push	acc
      0005E4 12r00r00         [24] 1587 	lcall	_printf
      0005E7 E5 81            [12] 1588 	mov	a,sp
      0005E9 24 FB            [12] 1589 	add	a,#0xfb
      0005EB F5 81            [12] 1590 	mov	sp,a
                                   1591 ;	main.c:199: printf("Number of storage characters in buffer0= %d \n\r", buffer0CurrentSize);
      0005ED 90r13rCB         [24] 1592 	mov	dptr,#_main_buffer0CurrentSize_65536_51
      0005F0 E0               [24] 1593 	movx	a,@dptr
      0005F1 FD               [12] 1594 	mov	r5,a
      0005F2 A3               [24] 1595 	inc	dptr
      0005F3 E0               [24] 1596 	movx	a,@dptr
      0005F4 FE               [12] 1597 	mov	r6,a
      0005F5 C0 06            [24] 1598 	push	ar6
      0005F7 C0 05            [24] 1599 	push	ar5
      0005F9 C0 05            [24] 1600 	push	ar5
      0005FB C0 06            [24] 1601 	push	ar6
      0005FD 74rA4            [12] 1602 	mov	a,#___str_34
      0005FF C0 E0            [24] 1603 	push	acc
      000601 74s02            [12] 1604 	mov	a,#(___str_34 >> 8)
      000603 C0 E0            [24] 1605 	push	acc
      000605 74 80            [12] 1606 	mov	a,#0x80
      000607 C0 E0            [24] 1607 	push	acc
      000609 12r00r00         [24] 1608 	lcall	_printf
      00060C E5 81            [12] 1609 	mov	a,sp
      00060E 24 FB            [12] 1610 	add	a,#0xfb
      000610 F5 81            [12] 1611 	mov	sp,a
      000612 D0 05            [24] 1612 	pop	ar5
      000614 D0 06            [24] 1613 	pop	ar6
                                   1614 ;	main.c:200: printf("Amount of free space in buffer0= %d \n\r", (heap[0].buffersize-buffer0CurrentSize));
      000616 90r12rC4         [24] 1615 	mov	dptr,#(_heap + 0x0004)
      000619 E0               [24] 1616 	movx	a,@dptr
      00061A FB               [12] 1617 	mov	r3,a
      00061B A3               [24] 1618 	inc	dptr
      00061C E0               [24] 1619 	movx	a,@dptr
      00061D FC               [12] 1620 	mov	r4,a
      00061E EB               [12] 1621 	mov	a,r3
      00061F C3               [12] 1622 	clr	c
      000620 9D               [12] 1623 	subb	a,r5
      000621 FD               [12] 1624 	mov	r5,a
      000622 EC               [12] 1625 	mov	a,r4
      000623 9E               [12] 1626 	subb	a,r6
      000624 FE               [12] 1627 	mov	r6,a
      000625 C0 05            [24] 1628 	push	ar5
      000627 C0 06            [24] 1629 	push	ar6
      000629 74rD3            [12] 1630 	mov	a,#___str_35
      00062B C0 E0            [24] 1631 	push	acc
      00062D 74s02            [12] 1632 	mov	a,#(___str_35 >> 8)
      00062F C0 E0            [24] 1633 	push	acc
      000631 74 80            [12] 1634 	mov	a,#0x80
      000633 C0 E0            [24] 1635 	push	acc
      000635 12r00r00         [24] 1636 	lcall	_printf
      000638 E5 81            [12] 1637 	mov	a,sp
      00063A 24 FB            [12] 1638 	add	a,#0xfb
      00063C F5 81            [12] 1639 	mov	sp,a
                                   1640 ;	main.c:203: for (int i=1; i<30; i++){
      00063E 75*04 01         [24] 1641 	mov	_main_sloc2_1_0,#0x01
      000641 75*05 00         [24] 1642 	mov	(_main_sloc2_1_0 + 1),#0x00
      000644                       1643 00165$:
      000644 C3               [12] 1644 	clr	c
      000645 E5*04            [12] 1645 	mov	a,_main_sloc2_1_0
      000647 94 1E            [12] 1646 	subb	a,#0x1e
      000649 E5*05            [12] 1647 	mov	a,(_main_sloc2_1_0 + 1)
      00064B 64 80            [12] 1648 	xrl	a,#0x80
      00064D 94 80            [12] 1649 	subb	a,#0x80
      00064F 40 03            [24] 1650 	jc	00351$
      000651 02r07r9A         [24] 1651 	ljmp	00128$
      000654                       1652 00351$:
                                   1653 ;	main.c:204: if(heap[i].buffersize!=0){
      000654 90r00r00         [24] 1654 	mov	dptr,#__mulint_PARM_2
      000657 E5*04            [12] 1655 	mov	a,_main_sloc2_1_0
      000659 F0               [24] 1656 	movx	@dptr,a
      00065A E5*05            [12] 1657 	mov	a,(_main_sloc2_1_0 + 1)
      00065C A3               [24] 1658 	inc	dptr
      00065D F0               [24] 1659 	movx	@dptr,a
      00065E 90 00 06         [24] 1660 	mov	dptr,#0x0006
      000661 12r00r00         [24] 1661 	lcall	__mulint
      000664 AB 82            [24] 1662 	mov	r3,dpl
      000666 AC 83            [24] 1663 	mov	r4,dph
      000668 EB               [12] 1664 	mov	a,r3
      000669 24rC0            [12] 1665 	add	a,#_heap
      00066B FB               [12] 1666 	mov	r3,a
      00066C EC               [12] 1667 	mov	a,r4
      00066D 34s12            [12] 1668 	addc	a,#(_heap >> 8)
      00066F FC               [12] 1669 	mov	r4,a
      000670 74 04            [12] 1670 	mov	a,#0x04
      000672 2B               [12] 1671 	add	a,r3
      000673 F9               [12] 1672 	mov	r1,a
      000674 E4               [12] 1673 	clr	a
      000675 3C               [12] 1674 	addc	a,r4
      000676 FA               [12] 1675 	mov	r2,a
      000677 89 82            [24] 1676 	mov	dpl,r1
      000679 8A 83            [24] 1677 	mov	dph,r2
      00067B E0               [24] 1678 	movx	a,@dptr
      00067C F8               [12] 1679 	mov	r0,a
      00067D A3               [24] 1680 	inc	dptr
      00067E E0               [24] 1681 	movx	a,@dptr
      00067F FE               [12] 1682 	mov	r6,a
      000680 48               [12] 1683 	orl	a,r0
      000681 70 03            [24] 1684 	jnz	00352$
      000683 02r07r8F         [24] 1685 	ljmp	00166$
      000686                       1686 00352$:
                                   1687 ;	main.c:205: printf("----------------------Buffer %d details ------------------------\n\r", heap[i].buffernumber);
      000686 8B 82            [24] 1688 	mov	dpl,r3
      000688 8C 83            [24] 1689 	mov	dph,r4
      00068A E0               [24] 1690 	movx	a,@dptr
      00068B FE               [12] 1691 	mov	r6,a
      00068C 7D 00            [12] 1692 	mov	r5,#0x00
      00068E C0 04            [24] 1693 	push	ar4
      000690 C0 03            [24] 1694 	push	ar3
      000692 C0 02            [24] 1695 	push	ar2
      000694 C0 01            [24] 1696 	push	ar1
      000696 C0 06            [24] 1697 	push	ar6
      000698 C0 05            [24] 1698 	push	ar5
      00069A 74rFA            [12] 1699 	mov	a,#___str_36
      00069C C0 E0            [24] 1700 	push	acc
      00069E 74s02            [12] 1701 	mov	a,#(___str_36 >> 8)
      0006A0 C0 E0            [24] 1702 	push	acc
      0006A2 74 80            [12] 1703 	mov	a,#0x80
      0006A4 C0 E0            [24] 1704 	push	acc
      0006A6 12r00r00         [24] 1705 	lcall	_printf
      0006A9 E5 81            [12] 1706 	mov	a,sp
      0006AB 24 FB            [12] 1707 	add	a,#0xfb
      0006AD F5 81            [12] 1708 	mov	sp,a
      0006AF D0 01            [24] 1709 	pop	ar1
      0006B1 D0 02            [24] 1710 	pop	ar2
      0006B3 D0 03            [24] 1711 	pop	ar3
      0006B5 D0 04            [24] 1712 	pop	ar4
                                   1713 ;	main.c:206: printf("Buffer number= %d \n\r", heap[i].buffernumber);                                     /*prints next buffers information*/
      0006B7 8B 82            [24] 1714 	mov	dpl,r3
      0006B9 8C 83            [24] 1715 	mov	dph,r4
      0006BB E0               [24] 1716 	movx	a,@dptr
      0006BC FE               [12] 1717 	mov	r6,a
      0006BD 7D 00            [12] 1718 	mov	r5,#0x00
      0006BF C0 04            [24] 1719 	push	ar4
      0006C1 C0 03            [24] 1720 	push	ar3
      0006C3 C0 02            [24] 1721 	push	ar2
      0006C5 C0 01            [24] 1722 	push	ar1
      0006C7 C0 06            [24] 1723 	push	ar6
      0006C9 C0 05            [24] 1724 	push	ar5
      0006CB 74r46            [12] 1725 	mov	a,#___str_30
      0006CD C0 E0            [24] 1726 	push	acc
      0006CF 74s02            [12] 1727 	mov	a,#(___str_30 >> 8)
      0006D1 C0 E0            [24] 1728 	push	acc
      0006D3 74 80            [12] 1729 	mov	a,#0x80
      0006D5 C0 E0            [24] 1730 	push	acc
      0006D7 12r00r00         [24] 1731 	lcall	_printf
      0006DA E5 81            [12] 1732 	mov	a,sp
      0006DC 24 FB            [12] 1733 	add	a,#0xfb
      0006DE F5 81            [12] 1734 	mov	sp,a
      0006E0 D0 01            [24] 1735 	pop	ar1
      0006E2 D0 02            [24] 1736 	pop	ar2
      0006E4 D0 03            [24] 1737 	pop	ar3
      0006E6 D0 04            [24] 1738 	pop	ar4
                                   1739 ;	main.c:207: printf("Buffer start address= %p \n\r", heap[i].bufferStartaddress);
      0006E8 0B               [12] 1740 	inc	r3
      0006E9 BB 00 01         [24] 1741 	cjne	r3,#0x00,00353$
      0006EC 0C               [12] 1742 	inc	r4
      0006ED                       1743 00353$:
      0006ED 8B 82            [24] 1744 	mov	dpl,r3
      0006EF 8C 83            [24] 1745 	mov	dph,r4
      0006F1 E0               [24] 1746 	movx	a,@dptr
      0006F2 F8               [12] 1747 	mov	r0,a
      0006F3 A3               [24] 1748 	inc	dptr
      0006F4 E0               [24] 1749 	movx	a,@dptr
      0006F5 FD               [12] 1750 	mov	r5,a
      0006F6 A3               [24] 1751 	inc	dptr
      0006F7 E0               [24] 1752 	movx	a,@dptr
      0006F8 FE               [12] 1753 	mov	r6,a
      0006F9 C0 04            [24] 1754 	push	ar4
      0006FB C0 03            [24] 1755 	push	ar3
      0006FD C0 02            [24] 1756 	push	ar2
      0006FF C0 01            [24] 1757 	push	ar1
      000701 C0 00            [24] 1758 	push	ar0
      000703 C0 05            [24] 1759 	push	ar5
      000705 C0 06            [24] 1760 	push	ar6
      000707 74r5B            [12] 1761 	mov	a,#___str_31
      000709 C0 E0            [24] 1762 	push	acc
      00070B 74s02            [12] 1763 	mov	a,#(___str_31 >> 8)
      00070D C0 E0            [24] 1764 	push	acc
      00070F 74 80            [12] 1765 	mov	a,#0x80
      000711 C0 E0            [24] 1766 	push	acc
      000713 12r00r00         [24] 1767 	lcall	_printf
      000716 E5 81            [12] 1768 	mov	a,sp
      000718 24 FA            [12] 1769 	add	a,#0xfa
      00071A F5 81            [12] 1770 	mov	sp,a
      00071C D0 01            [24] 1771 	pop	ar1
      00071E D0 02            [24] 1772 	pop	ar2
                                   1773 ;	main.c:208: printf("Buffer size= %d \n\r", heap[i].buffersize);
      000720 89 82            [24] 1774 	mov	dpl,r1
      000722 8A 83            [24] 1775 	mov	dph,r2
      000724 E0               [24] 1776 	movx	a,@dptr
      000725 FD               [12] 1777 	mov	r5,a
      000726 A3               [24] 1778 	inc	dptr
      000727 E0               [24] 1779 	movx	a,@dptr
      000728 FE               [12] 1780 	mov	r6,a
      000729 C0 02            [24] 1781 	push	ar2
      00072B C0 01            [24] 1782 	push	ar1
      00072D C0 05            [24] 1783 	push	ar5
      00072F C0 06            [24] 1784 	push	ar6
      000731 74r91            [12] 1785 	mov	a,#___str_33
      000733 C0 E0            [24] 1786 	push	acc
      000735 74s02            [12] 1787 	mov	a,#(___str_33 >> 8)
      000737 C0 E0            [24] 1788 	push	acc
      000739 74 80            [12] 1789 	mov	a,#0x80
      00073B C0 E0            [24] 1790 	push	acc
      00073D 12r00r00         [24] 1791 	lcall	_printf
      000740 E5 81            [12] 1792 	mov	a,sp
      000742 24 FB            [12] 1793 	add	a,#0xfb
      000744 F5 81            [12] 1794 	mov	sp,a
      000746 D0 01            [24] 1795 	pop	ar1
      000748 D0 02            [24] 1796 	pop	ar2
      00074A D0 03            [24] 1797 	pop	ar3
      00074C D0 04            [24] 1798 	pop	ar4
                                   1799 ;	main.c:209: printf("Buffer end address= %p \n\r", heap[i].bufferStartaddress+heap[i].buffersize/2);
      00074E 8B 82            [24] 1800 	mov	dpl,r3
      000750 8C 83            [24] 1801 	mov	dph,r4
      000752 E0               [24] 1802 	movx	a,@dptr
      000753 FB               [12] 1803 	mov	r3,a
      000754 A3               [24] 1804 	inc	dptr
      000755 E0               [24] 1805 	movx	a,@dptr
      000756 FC               [12] 1806 	mov	r4,a
      000757 A3               [24] 1807 	inc	dptr
      000758 E0               [24] 1808 	movx	a,@dptr
      000759 FE               [12] 1809 	mov	r6,a
      00075A 89 82            [24] 1810 	mov	dpl,r1
      00075C 8A 83            [24] 1811 	mov	dph,r2
      00075E E0               [24] 1812 	movx	a,@dptr
      00075F F9               [12] 1813 	mov	r1,a
      000760 A3               [24] 1814 	inc	dptr
      000761 E0               [24] 1815 	movx	a,@dptr
      000762 C3               [12] 1816 	clr	c
      000763 13               [12] 1817 	rrc	a
      000764 C9               [12] 1818 	xch	a,r1
      000765 13               [12] 1819 	rrc	a
      000766 C9               [12] 1820 	xch	a,r1
      000767 FA               [12] 1821 	mov	r2,a
      000768 E9               [12] 1822 	mov	a,r1
      000769 29               [12] 1823 	add	a,r1
      00076A F9               [12] 1824 	mov	r1,a
      00076B EA               [12] 1825 	mov	a,r2
      00076C 33               [12] 1826 	rlc	a
      00076D FA               [12] 1827 	mov	r2,a
      00076E E9               [12] 1828 	mov	a,r1
      00076F 2B               [12] 1829 	add	a,r3
      000770 FB               [12] 1830 	mov	r3,a
      000771 EA               [12] 1831 	mov	a,r2
      000772 3C               [12] 1832 	addc	a,r4
      000773 FC               [12] 1833 	mov	r4,a
      000774 C0 03            [24] 1834 	push	ar3
      000776 C0 04            [24] 1835 	push	ar4
      000778 C0 06            [24] 1836 	push	ar6
      00077A 74r77            [12] 1837 	mov	a,#___str_32
      00077C C0 E0            [24] 1838 	push	acc
      00077E 74s02            [12] 1839 	mov	a,#(___str_32 >> 8)
      000780 C0 E0            [24] 1840 	push	acc
      000782 74 80            [12] 1841 	mov	a,#0x80
      000784 C0 E0            [24] 1842 	push	acc
      000786 12r00r00         [24] 1843 	lcall	_printf
      000789 E5 81            [12] 1844 	mov	a,sp
      00078B 24 FA            [12] 1845 	add	a,#0xfa
      00078D F5 81            [12] 1846 	mov	sp,a
      00078F                       1847 00166$:
                                   1848 ;	main.c:203: for (int i=1; i<30; i++){
      00078F 05*04            [12] 1849 	inc	_main_sloc2_1_0
      000791 E4               [12] 1850 	clr	a
      000792 B5*04 02         [24] 1851 	cjne	a,_main_sloc2_1_0,00354$
      000795 05*05            [12] 1852 	inc	(_main_sloc2_1_0 + 1)
      000797                       1853 00354$:
      000797 02r06r44         [24] 1854 	ljmp	00165$
      00079A                       1855 00128$:
                                   1856 ;	main.c:212: puts("**********Storage characters at Buffer0:**********\r");
      00079A 90r03r3D         [24] 1857 	mov	dptr,#___str_37
      00079D 75 F0 80         [24] 1858 	mov	b,#0x80
      0007A0 12r00r00         [24] 1859 	lcall	_puts
                                   1860 ;	main.c:213: for (int i=0; i< buffer0CurrentSize; i++){                                  /*prints storage characters in buffer0*/
      0007A3 90r13rCB         [24] 1861 	mov	dptr,#_main_buffer0CurrentSize_65536_51
      0007A6 E0               [24] 1862 	movx	a,@dptr
      0007A7 FD               [12] 1863 	mov	r5,a
      0007A8 A3               [24] 1864 	inc	dptr
      0007A9 E0               [24] 1865 	movx	a,@dptr
      0007AA FE               [12] 1866 	mov	r6,a
      0007AB 7B 00            [12] 1867 	mov	r3,#0x00
      0007AD 7C 00            [12] 1868 	mov	r4,#0x00
      0007AF                       1869 00168$:
      0007AF 8B 01            [24] 1870 	mov	ar1,r3
      0007B1 8C 02            [24] 1871 	mov	ar2,r4
      0007B3 C3               [12] 1872 	clr	c
      0007B4 E9               [12] 1873 	mov	a,r1
      0007B5 9D               [12] 1874 	subb	a,r5
      0007B6 EA               [12] 1875 	mov	a,r2
      0007B7 9E               [12] 1876 	subb	a,r6
      0007B8 40 03            [24] 1877 	jc	00355$
      0007BA 02r08rA2         [24] 1878 	ljmp	00133$
      0007BD                       1879 00355$:
                                   1880 ;	main.c:214: if(i%15==0 && i!=0){                                                    /*prints 32 ASCII characters per line*/
      0007BD 90r00r00         [24] 1881 	mov	dptr,#__modsint_PARM_2
      0007C0 74 0F            [12] 1882 	mov	a,#0x0f
      0007C2 F0               [24] 1883 	movx	@dptr,a
      0007C3 E4               [12] 1884 	clr	a
      0007C4 A3               [24] 1885 	inc	dptr
      0007C5 F0               [24] 1886 	movx	@dptr,a
      0007C6 8B 82            [24] 1887 	mov	dpl,r3
      0007C8 8C 83            [24] 1888 	mov	dph,r4
      0007CA C0 06            [24] 1889 	push	ar6
      0007CC C0 05            [24] 1890 	push	ar5
      0007CE C0 04            [24] 1891 	push	ar4
      0007D0 C0 03            [24] 1892 	push	ar3
      0007D2 12r00r00         [24] 1893 	lcall	__modsint
      0007D5 E5 82            [12] 1894 	mov	a,dpl
      0007D7 85 83 F0         [24] 1895 	mov	b,dph
      0007DA D0 03            [24] 1896 	pop	ar3
      0007DC D0 04            [24] 1897 	pop	ar4
      0007DE D0 05            [24] 1898 	pop	ar5
      0007E0 D0 06            [24] 1899 	pop	ar6
      0007E2 45 F0            [12] 1900 	orl	a,b
      0007E4 70 5D            [24] 1901 	jnz	00130$
      0007E6 EB               [12] 1902 	mov	a,r3
      0007E7 4C               [12] 1903 	orl	a,r4
      0007E8 60 59            [24] 1904 	jz	00130$
                                   1905 ;	main.c:215: printf("%c\n\r", heap[0].bufferStartaddress[i]);
      0007EA C0 05            [24] 1906 	push	ar5
      0007EC C0 06            [24] 1907 	push	ar6
      0007EE 90r12rC1         [24] 1908 	mov	dptr,#(_heap + 0x0001)
      0007F1 E0               [24] 1909 	movx	a,@dptr
      0007F2 F8               [12] 1910 	mov	r0,a
      0007F3 A3               [24] 1911 	inc	dptr
      0007F4 E0               [24] 1912 	movx	a,@dptr
      0007F5 F9               [12] 1913 	mov	r1,a
      0007F6 A3               [24] 1914 	inc	dptr
      0007F7 E0               [24] 1915 	movx	a,@dptr
      0007F8 FA               [12] 1916 	mov	r2,a
      0007F9 EB               [12] 1917 	mov	a,r3
      0007FA 2B               [12] 1918 	add	a,r3
      0007FB FD               [12] 1919 	mov	r5,a
      0007FC EC               [12] 1920 	mov	a,r4
      0007FD 33               [12] 1921 	rlc	a
      0007FE FE               [12] 1922 	mov	r6,a
      0007FF ED               [12] 1923 	mov	a,r5
      000800 28               [12] 1924 	add	a,r0
      000801 F8               [12] 1925 	mov	r0,a
      000802 EE               [12] 1926 	mov	a,r6
      000803 39               [12] 1927 	addc	a,r1
      000804 F9               [12] 1928 	mov	r1,a
      000805 88 82            [24] 1929 	mov	dpl,r0
      000807 89 83            [24] 1930 	mov	dph,r1
      000809 8A F0            [24] 1931 	mov	b,r2
      00080B 12r00r00         [24] 1932 	lcall	__gptrget
      00080E F8               [12] 1933 	mov	r0,a
      00080F A3               [24] 1934 	inc	dptr
      000810 12r00r00         [24] 1935 	lcall	__gptrget
      000813 F9               [12] 1936 	mov	r1,a
      000814 C0 06            [24] 1937 	push	ar6
      000816 C0 05            [24] 1938 	push	ar5
      000818 C0 04            [24] 1939 	push	ar4
      00081A C0 03            [24] 1940 	push	ar3
      00081C C0 00            [24] 1941 	push	ar0
      00081E C0 01            [24] 1942 	push	ar1
      000820 74r71            [12] 1943 	mov	a,#___str_38
      000822 C0 E0            [24] 1944 	push	acc
      000824 74s03            [12] 1945 	mov	a,#(___str_38 >> 8)
      000826 C0 E0            [24] 1946 	push	acc
      000828 74 80            [12] 1947 	mov	a,#0x80
      00082A C0 E0            [24] 1948 	push	acc
      00082C 12r00r00         [24] 1949 	lcall	_printf
      00082F E5 81            [12] 1950 	mov	a,sp
      000831 24 FB            [12] 1951 	add	a,#0xfb
      000833 F5 81            [12] 1952 	mov	sp,a
      000835 D0 03            [24] 1953 	pop	ar3
      000837 D0 04            [24] 1954 	pop	ar4
      000839 D0 05            [24] 1955 	pop	ar5
      00083B D0 06            [24] 1956 	pop	ar6
      00083D D0 06            [24] 1957 	pop	ar6
      00083F D0 05            [24] 1958 	pop	ar5
      000841 80 57            [24] 1959 	sjmp	00169$
      000843                       1960 00130$:
                                   1961 ;	main.c:218: printf("%c ", heap[0].bufferStartaddress[i]);
      000843 C0 05            [24] 1962 	push	ar5
      000845 C0 06            [24] 1963 	push	ar6
      000847 90r12rC1         [24] 1964 	mov	dptr,#(_heap + 0x0001)
      00084A E0               [24] 1965 	movx	a,@dptr
      00084B F8               [12] 1966 	mov	r0,a
      00084C A3               [24] 1967 	inc	dptr
      00084D E0               [24] 1968 	movx	a,@dptr
      00084E F9               [12] 1969 	mov	r1,a
      00084F A3               [24] 1970 	inc	dptr
      000850 E0               [24] 1971 	movx	a,@dptr
      000851 FA               [12] 1972 	mov	r2,a
      000852 EB               [12] 1973 	mov	a,r3
      000853 2B               [12] 1974 	add	a,r3
      000854 FD               [12] 1975 	mov	r5,a
      000855 EC               [12] 1976 	mov	a,r4
      000856 33               [12] 1977 	rlc	a
      000857 FE               [12] 1978 	mov	r6,a
      000858 ED               [12] 1979 	mov	a,r5
      000859 28               [12] 1980 	add	a,r0
      00085A F8               [12] 1981 	mov	r0,a
      00085B EE               [12] 1982 	mov	a,r6
      00085C 39               [12] 1983 	addc	a,r1
      00085D F9               [12] 1984 	mov	r1,a
      00085E 88 82            [24] 1985 	mov	dpl,r0
      000860 89 83            [24] 1986 	mov	dph,r1
      000862 8A F0            [24] 1987 	mov	b,r2
      000864 12r00r00         [24] 1988 	lcall	__gptrget
      000867 F8               [12] 1989 	mov	r0,a
      000868 A3               [24] 1990 	inc	dptr
      000869 12r00r00         [24] 1991 	lcall	__gptrget
      00086C F9               [12] 1992 	mov	r1,a
      00086D C0 06            [24] 1993 	push	ar6
      00086F C0 05            [24] 1994 	push	ar5
      000871 C0 04            [24] 1995 	push	ar4
      000873 C0 03            [24] 1996 	push	ar3
      000875 C0 00            [24] 1997 	push	ar0
      000877 C0 01            [24] 1998 	push	ar1
      000879 74r76            [12] 1999 	mov	a,#___str_39
      00087B C0 E0            [24] 2000 	push	acc
      00087D 74s03            [12] 2001 	mov	a,#(___str_39 >> 8)
      00087F C0 E0            [24] 2002 	push	acc
      000881 74 80            [12] 2003 	mov	a,#0x80
      000883 C0 E0            [24] 2004 	push	acc
      000885 12r00r00         [24] 2005 	lcall	_printf
      000888 E5 81            [12] 2006 	mov	a,sp
      00088A 24 FB            [12] 2007 	add	a,#0xfb
      00088C F5 81            [12] 2008 	mov	sp,a
      00088E D0 03            [24] 2009 	pop	ar3
      000890 D0 04            [24] 2010 	pop	ar4
      000892 D0 05            [24] 2011 	pop	ar5
      000894 D0 06            [24] 2012 	pop	ar6
                                   2013 ;	main.c:259: printf("Command character= %c \n\r", character[0]);
      000896 D0 06            [24] 2014 	pop	ar6
      000898 D0 05            [24] 2015 	pop	ar5
                                   2016 ;	main.c:218: printf("%c ", heap[0].bufferStartaddress[i]);
      00089A                       2017 00169$:
                                   2018 ;	main.c:213: for (int i=0; i< buffer0CurrentSize; i++){                                  /*prints storage characters in buffer0*/
      00089A 0B               [12] 2019 	inc	r3
      00089B BB 00 01         [24] 2020 	cjne	r3,#0x00,00358$
      00089E 0C               [12] 2021 	inc	r4
      00089F                       2022 00358$:
      00089F 02r07rAF         [24] 2023 	ljmp	00168$
      0008A2                       2024 00133$:
                                   2025 ;	main.c:221: puts("\n\r");
      0008A2 90r03r7A         [24] 2026 	mov	dptr,#___str_40
      0008A5 75 F0 80         [24] 2027 	mov	b,#0x80
      0008A8 12r00r00         [24] 2028 	lcall	_puts
                                   2029 ;	main.c:222: for (int i=0; i< heap[0].buffersize; i++){
      0008AB 7D 00            [12] 2030 	mov	r5,#0x00
      0008AD 7E 00            [12] 2031 	mov	r6,#0x00
      0008AF                       2032 00171$:
      0008AF 90r12rC4         [24] 2033 	mov	dptr,#(_heap + 0x0004)
      0008B2 E0               [24] 2034 	movx	a,@dptr
      0008B3 FB               [12] 2035 	mov	r3,a
      0008B4 A3               [24] 2036 	inc	dptr
      0008B5 E0               [24] 2037 	movx	a,@dptr
      0008B6 FC               [12] 2038 	mov	r4,a
      0008B7 8D 01            [24] 2039 	mov	ar1,r5
      0008B9 8E 02            [24] 2040 	mov	ar2,r6
      0008BB C3               [12] 2041 	clr	c
      0008BC E9               [12] 2042 	mov	a,r1
      0008BD 9B               [12] 2043 	subb	a,r3
      0008BE EA               [12] 2044 	mov	a,r2
      0008BF 9C               [12] 2045 	subb	a,r4
      0008C0 50 2C            [24] 2046 	jnc	00134$
                                   2047 ;	main.c:223: heap[0].bufferStartaddress[i]=0;                            /*clears out buffer0*/
      0008C2 90r12rC1         [24] 2048 	mov	dptr,#(_heap + 0x0001)
      0008C5 E0               [24] 2049 	movx	a,@dptr
      0008C6 FA               [12] 2050 	mov	r2,a
      0008C7 A3               [24] 2051 	inc	dptr
      0008C8 E0               [24] 2052 	movx	a,@dptr
      0008C9 FB               [12] 2053 	mov	r3,a
      0008CA A3               [24] 2054 	inc	dptr
      0008CB E0               [24] 2055 	movx	a,@dptr
      0008CC FC               [12] 2056 	mov	r4,a
      0008CD ED               [12] 2057 	mov	a,r5
      0008CE 2D               [12] 2058 	add	a,r5
      0008CF F8               [12] 2059 	mov	r0,a
      0008D0 EE               [12] 2060 	mov	a,r6
      0008D1 33               [12] 2061 	rlc	a
      0008D2 F9               [12] 2062 	mov	r1,a
      0008D3 E8               [12] 2063 	mov	a,r0
      0008D4 2A               [12] 2064 	add	a,r2
      0008D5 FA               [12] 2065 	mov	r2,a
      0008D6 E9               [12] 2066 	mov	a,r1
      0008D7 3B               [12] 2067 	addc	a,r3
      0008D8 FB               [12] 2068 	mov	r3,a
      0008D9 8A 82            [24] 2069 	mov	dpl,r2
      0008DB 8B 83            [24] 2070 	mov	dph,r3
      0008DD 8C F0            [24] 2071 	mov	b,r4
      0008DF E4               [12] 2072 	clr	a
      0008E0 12r00r00         [24] 2073 	lcall	__gptrput
      0008E3 A3               [24] 2074 	inc	dptr
      0008E4 12r00r00         [24] 2075 	lcall	__gptrput
                                   2076 ;	main.c:222: for (int i=0; i< heap[0].buffersize; i++){
      0008E7 0D               [12] 2077 	inc	r5
      0008E8 BD 00 C4         [24] 2078 	cjne	r5,#0x00,00171$
      0008EB 0E               [12] 2079 	inc	r6
      0008EC 80 C1            [24] 2080 	sjmp	00171$
      0008EE                       2081 00134$:
                                   2082 ;	main.c:225: buffer0ptr=0;                                                   /*initializes buffer0 to start*/
      0008EE 90r13rC9         [24] 2083 	mov	dptr,#_main_buffer0ptr_65536_51
      0008F1 E4               [12] 2084 	clr	a
      0008F2 F0               [24] 2085 	movx	@dptr,a
      0008F3 A3               [24] 2086 	inc	dptr
      0008F4 F0               [24] 2087 	movx	@dptr,a
                                   2088 ;	main.c:226: buffer0CurrentSize=0;
      0008F5 90r13rCB         [24] 2089 	mov	dptr,#_main_buffer0CurrentSize_65536_51
      0008F8 F0               [24] 2090 	movx	@dptr,a
      0008F9 A3               [24] 2091 	inc	dptr
      0008FA F0               [24] 2092 	movx	@dptr,a
                                   2093 ;	main.c:227: numOfCharactersReceived=0;
      0008FB 90r13rE2         [24] 2094 	mov	dptr,#_main_numOfCharactersReceived_65536_51
      0008FE F0               [24] 2095 	movx	@dptr,a
      0008FF A3               [24] 2096 	inc	dptr
      000900 F0               [24] 2097 	movx	@dptr,a
      000901 02r00r31         [24] 2098 	ljmp	00162$
      000904                       2099 00146$:
                                   2100 ;	main.c:229: else if (character[0]=='=') {                                      /*request to print hexadecimal values of storage characters in buffer0*/
      000904 BF 3D 47         [24] 2101 	cjne	r7,#0x3d,00143$
                                   2102 ;	main.c:231: puts("Hexadecimal values of storage characters at Buffer0 \n\r");
      000907 90r05rB8         [24] 2103 	mov	dptr,#___str_56
      00090A 75 F0 80         [24] 2104 	mov	b,#0x80
      00090D 12r00r00         [24] 2105 	lcall	_puts
                                   2106 ;	main.c:232: hexDump(buffer0, buffer0CurrentSize*2, 32);
      000910 90r13r74         [24] 2107 	mov	dptr,#_main_buffer0_65536_51
      000913 E0               [24] 2108 	movx	a,@dptr
      000914 FD               [12] 2109 	mov	r5,a
      000915 A3               [24] 2110 	inc	dptr
      000916 E0               [24] 2111 	movx	a,@dptr
      000917 FE               [12] 2112 	mov	r6,a
      000918 7C 00            [12] 2113 	mov	r4,#0x00
      00091A 90r13rCB         [24] 2114 	mov	dptr,#_main_buffer0CurrentSize_65536_51
      00091D E0               [24] 2115 	movx	a,@dptr
      00091E FA               [12] 2116 	mov	r2,a
      00091F A3               [24] 2117 	inc	dptr
      000920 E0               [24] 2118 	movx	a,@dptr
      000921 FB               [12] 2119 	mov	r3,a
      000922 EA               [12] 2120 	mov	a,r2
      000923 2A               [12] 2121 	add	a,r2
      000924 FA               [12] 2122 	mov	r2,a
      000925 EB               [12] 2123 	mov	a,r3
      000926 33               [12] 2124 	rlc	a
      000927 FB               [12] 2125 	mov	r3,a
      000928 90r13rE5         [24] 2126 	mov	dptr,#_hexDump_PARM_2
      00092B EA               [12] 2127 	mov	a,r2
      00092C F0               [24] 2128 	movx	@dptr,a
      00092D EB               [12] 2129 	mov	a,r3
      00092E A3               [24] 2130 	inc	dptr
      00092F F0               [24] 2131 	movx	@dptr,a
      000930 90r13rE7         [24] 2132 	mov	dptr,#_hexDump_PARM_3
      000933 74 20            [12] 2133 	mov	a,#0x20
      000935 F0               [24] 2134 	movx	@dptr,a
      000936 E4               [12] 2135 	clr	a
      000937 A3               [24] 2136 	inc	dptr
      000938 F0               [24] 2137 	movx	@dptr,a
      000939 8D 82            [24] 2138 	mov	dpl,r5
      00093B 8E 83            [24] 2139 	mov	dph,r6
      00093D 8C F0            [24] 2140 	mov	b,r4
      00093F 12r0ArB0         [24] 2141 	lcall	_hexDump
                                   2142 ;	main.c:233: puts("\n\r");
      000942 90r03r7A         [24] 2143 	mov	dptr,#___str_40
      000945 75 F0 80         [24] 2144 	mov	b,#0x80
      000948 12r00r00         [24] 2145 	lcall	_puts
      00094B 02r00r31         [24] 2146 	ljmp	00162$
      00094E                       2147 00143$:
                                   2148 ;	main.c:235: else if (character[0]=='@'){                                       /*request to free all buffers*/
      00094E BF 40 02         [24] 2149 	cjne	r7,#0x40,00363$
      000951 80 03            [24] 2150 	sjmp	00364$
      000953                       2151 00363$:
      000953 02r0Ar63         [24] 2152 	ljmp	00140$
      000956                       2153 00364$:
                                   2154 ;	main.c:237: puts("Freeing all buffers \n\r");
      000956 90r06r04         [24] 2155 	mov	dptr,#___str_57
      000959 75 F0 80         [24] 2156 	mov	b,#0x80
      00095C 12r00r00         [24] 2157 	lcall	_puts
                                   2158 ;	main.c:239: for(int i=0; i<30; i++){
      00095F 7E 00            [12] 2159 	mov	r6,#0x00
      000961 7F 00            [12] 2160 	mov	r7,#0x00
      000963                       2161 00174$:
      000963 C3               [12] 2162 	clr	c
      000964 EE               [12] 2163 	mov	a,r6
      000965 94 1E            [12] 2164 	subb	a,#0x1e
      000967 EF               [12] 2165 	mov	a,r7
      000968 64 80            [12] 2166 	xrl	a,#0x80
      00096A 94 80            [12] 2167 	subb	a,#0x80
      00096C 40 03            [24] 2168 	jc	00365$
      00096E 02r0Ar00         [24] 2169 	ljmp	00137$
      000971                       2170 00365$:
                                   2171 ;	main.c:240: if(heap[i].bufferStartaddress!=NULL){
      000971 90r00r00         [24] 2172 	mov	dptr,#__mulint_PARM_2
      000974 EE               [12] 2173 	mov	a,r6
      000975 F0               [24] 2174 	movx	@dptr,a
      000976 EF               [12] 2175 	mov	a,r7
      000977 A3               [24] 2176 	inc	dptr
      000978 F0               [24] 2177 	movx	@dptr,a
      000979 90 00 06         [24] 2178 	mov	dptr,#0x0006
      00097C C0 07            [24] 2179 	push	ar7
      00097E C0 06            [24] 2180 	push	ar6
      000980 12r00r00         [24] 2181 	lcall	__mulint
      000983 AC 82            [24] 2182 	mov	r4,dpl
      000985 AD 83            [24] 2183 	mov	r5,dph
      000987 D0 06            [24] 2184 	pop	ar6
      000989 D0 07            [24] 2185 	pop	ar7
      00098B EC               [12] 2186 	mov	a,r4
      00098C 24rC0            [12] 2187 	add	a,#_heap
      00098E FC               [12] 2188 	mov	r4,a
      00098F ED               [12] 2189 	mov	a,r5
      000990 34s12            [12] 2190 	addc	a,#(_heap >> 8)
      000992 FD               [12] 2191 	mov	r5,a
      000993 74 01            [12] 2192 	mov	a,#0x01
      000995 2C               [12] 2193 	add	a,r4
      000996 FA               [12] 2194 	mov	r2,a
      000997 E4               [12] 2195 	clr	a
      000998 3D               [12] 2196 	addc	a,r5
      000999 FB               [12] 2197 	mov	r3,a
      00099A 8A 82            [24] 2198 	mov	dpl,r2
      00099C 8B 83            [24] 2199 	mov	dph,r3
      00099E E0               [24] 2200 	movx	a,@dptr
      00099F F5*04            [12] 2201 	mov	_main_sloc2_1_0,a
      0009A1 A3               [24] 2202 	inc	dptr
      0009A2 E0               [24] 2203 	movx	a,@dptr
      0009A3 F5*05            [12] 2204 	mov	(_main_sloc2_1_0 + 1),a
      0009A5 A3               [24] 2205 	inc	dptr
      0009A6 E0               [24] 2206 	movx	a,@dptr
      0009A7 F5*06            [12] 2207 	mov	(_main_sloc2_1_0 + 2),a
      0009A9 E5*04            [12] 2208 	mov	a,_main_sloc2_1_0
      0009AB 45*05            [12] 2209 	orl	a,(_main_sloc2_1_0 + 1)
      0009AD 60 49            [24] 2210 	jz	00175$
                                   2211 ;	main.c:241: free(heap[i].bufferStartaddress);                       /*free all buffers start addresses*/
      0009AF C0 06            [24] 2212 	push	ar6
      0009B1 C0 07            [24] 2213 	push	ar7
      0009B3 A8*04            [24] 2214 	mov	r0,_main_sloc2_1_0
      0009B5 A9*05            [24] 2215 	mov	r1,(_main_sloc2_1_0 + 1)
      0009B7 AF*06            [24] 2216 	mov	r7,(_main_sloc2_1_0 + 2)
      0009B9 88 82            [24] 2217 	mov	dpl,r0
      0009BB 89 83            [24] 2218 	mov	dph,r1
      0009BD 8F F0            [24] 2219 	mov	b,r7
      0009BF C0 07            [24] 2220 	push	ar7
      0009C1 C0 06            [24] 2221 	push	ar6
      0009C3 C0 05            [24] 2222 	push	ar5
      0009C5 C0 04            [24] 2223 	push	ar4
      0009C7 C0 03            [24] 2224 	push	ar3
      0009C9 C0 02            [24] 2225 	push	ar2
      0009CB 12r00r00         [24] 2226 	lcall	_free
      0009CE D0 02            [24] 2227 	pop	ar2
      0009D0 D0 03            [24] 2228 	pop	ar3
      0009D2 D0 04            [24] 2229 	pop	ar4
      0009D4 D0 05            [24] 2230 	pop	ar5
      0009D6 D0 06            [24] 2231 	pop	ar6
      0009D8 D0 07            [24] 2232 	pop	ar7
                                   2233 ;	main.c:242: heap[i].buffernumber=0;                                 /*clearing out buffer information on heap*/
      0009DA 8C 82            [24] 2234 	mov	dpl,r4
      0009DC 8D 83            [24] 2235 	mov	dph,r5
      0009DE E4               [12] 2236 	clr	a
      0009DF F0               [24] 2237 	movx	@dptr,a
                                   2238 ;	main.c:243: heap[i].buffersize=0;
      0009E0 8C 82            [24] 2239 	mov	dpl,r4
      0009E2 8D 83            [24] 2240 	mov	dph,r5
      0009E4 A3               [24] 2241 	inc	dptr
      0009E5 A3               [24] 2242 	inc	dptr
      0009E6 A3               [24] 2243 	inc	dptr
      0009E7 A3               [24] 2244 	inc	dptr
      0009E8 F0               [24] 2245 	movx	@dptr,a
      0009E9 A3               [24] 2246 	inc	dptr
      0009EA F0               [24] 2247 	movx	@dptr,a
                                   2248 ;	main.c:244: heap[i].bufferStartaddress=NULL;
      0009EB 8A 82            [24] 2249 	mov	dpl,r2
      0009ED 8B 83            [24] 2250 	mov	dph,r3
      0009EF F0               [24] 2251 	movx	@dptr,a
      0009F0 A3               [24] 2252 	inc	dptr
      0009F1 F0               [24] 2253 	movx	@dptr,a
      0009F2 A3               [24] 2254 	inc	dptr
      0009F3 F0               [24] 2255 	movx	@dptr,a
                                   2256 ;	main.c:259: printf("Command character= %c \n\r", character[0]);
      0009F4 D0 07            [24] 2257 	pop	ar7
      0009F6 D0 06            [24] 2258 	pop	ar6
                                   2259 ;	main.c:244: heap[i].bufferStartaddress=NULL;
      0009F8                       2260 00175$:
                                   2261 ;	main.c:239: for(int i=0; i<30; i++){
      0009F8 0E               [12] 2262 	inc	r6
      0009F9 BE 00 01         [24] 2263 	cjne	r6,#0x00,00367$
      0009FC 0F               [12] 2264 	inc	r7
      0009FD                       2265 00367$:
      0009FD 02r09r63         [24] 2266 	ljmp	00174$
      000A00                       2267 00137$:
                                   2268 ;	main.c:248: for (int i=0; i<buffer0CurrentSize; i++){
      000A00 90r13rCB         [24] 2269 	mov	dptr,#_main_buffer0CurrentSize_65536_51
      000A03 E0               [24] 2270 	movx	a,@dptr
      000A04 FE               [12] 2271 	mov	r6,a
      000A05 A3               [24] 2272 	inc	dptr
      000A06 E0               [24] 2273 	movx	a,@dptr
      000A07 FF               [12] 2274 	mov	r7,a
      000A08 7C 00            [12] 2275 	mov	r4,#0x00
      000A0A 7D 00            [12] 2276 	mov	r5,#0x00
      000A0C                       2277 00177$:
      000A0C 8C 02            [24] 2278 	mov	ar2,r4
      000A0E 8D 03            [24] 2279 	mov	ar3,r5
      000A10 C3               [12] 2280 	clr	c
      000A11 EA               [12] 2281 	mov	a,r2
      000A12 9E               [12] 2282 	subb	a,r6
      000A13 EB               [12] 2283 	mov	a,r3
      000A14 9F               [12] 2284 	subb	a,r7
      000A15 50 34            [24] 2285 	jnc	00138$
                                   2286 ;	main.c:249: heap[0].bufferStartaddress[i]=0;                            /*clearing out storage characters in buffer0*/
      000A17 C0 06            [24] 2287 	push	ar6
      000A19 C0 07            [24] 2288 	push	ar7
      000A1B 90r12rC1         [24] 2289 	mov	dptr,#(_heap + 0x0001)
      000A1E E0               [24] 2290 	movx	a,@dptr
      000A1F F9               [12] 2291 	mov	r1,a
      000A20 A3               [24] 2292 	inc	dptr
      000A21 E0               [24] 2293 	movx	a,@dptr
      000A22 FA               [12] 2294 	mov	r2,a
      000A23 A3               [24] 2295 	inc	dptr
      000A24 E0               [24] 2296 	movx	a,@dptr
      000A25 FB               [12] 2297 	mov	r3,a
      000A26 EC               [12] 2298 	mov	a,r4
      000A27 2C               [12] 2299 	add	a,r4
      000A28 F8               [12] 2300 	mov	r0,a
      000A29 ED               [12] 2301 	mov	a,r5
      000A2A 33               [12] 2302 	rlc	a
      000A2B FF               [12] 2303 	mov	r7,a
      000A2C E8               [12] 2304 	mov	a,r0
      000A2D 29               [12] 2305 	add	a,r1
      000A2E F9               [12] 2306 	mov	r1,a
      000A2F EF               [12] 2307 	mov	a,r7
      000A30 3A               [12] 2308 	addc	a,r2
      000A31 FA               [12] 2309 	mov	r2,a
      000A32 89 82            [24] 2310 	mov	dpl,r1
      000A34 8A 83            [24] 2311 	mov	dph,r2
      000A36 8B F0            [24] 2312 	mov	b,r3
      000A38 E4               [12] 2313 	clr	a
      000A39 12r00r00         [24] 2314 	lcall	__gptrput
      000A3C A3               [24] 2315 	inc	dptr
      000A3D 12r00r00         [24] 2316 	lcall	__gptrput
                                   2317 ;	main.c:248: for (int i=0; i<buffer0CurrentSize; i++){
      000A40 0C               [12] 2318 	inc	r4
      000A41 BC 00 01         [24] 2319 	cjne	r4,#0x00,00369$
      000A44 0D               [12] 2320 	inc	r5
      000A45                       2321 00369$:
      000A45 D0 07            [24] 2322 	pop	ar7
      000A47 D0 06            [24] 2323 	pop	ar6
      000A49 80 C1            [24] 2324 	sjmp	00177$
      000A4B                       2325 00138$:
                                   2326 ;	main.c:251: buffer0CurrentSize=0;
      000A4B 90r13rCB         [24] 2327 	mov	dptr,#_main_buffer0CurrentSize_65536_51
      000A4E E4               [12] 2328 	clr	a
      000A4F F0               [24] 2329 	movx	@dptr,a
      000A50 A3               [24] 2330 	inc	dptr
      000A51 F0               [24] 2331 	movx	@dptr,a
                                   2332 ;	main.c:252: buffer0ptr=0;
      000A52 90r13rC9         [24] 2333 	mov	dptr,#_main_buffer0ptr_65536_51
      000A55 F0               [24] 2334 	movx	@dptr,a
      000A56 A3               [24] 2335 	inc	dptr
      000A57 F0               [24] 2336 	movx	@dptr,a
                                   2337 ;	main.c:253: newBufferscount=0;
      000A58 90r13rD7         [24] 2338 	mov	dptr,#_main_newBufferscount_65536_51
      000A5B F0               [24] 2339 	movx	@dptr,a
                                   2340 ;	main.c:254: isFlag=0;                                                       /*starts the program again*/
      000A5C 90r13rC1         [24] 2341 	mov	dptr,#_main_isFlag_65536_51
      000A5F F0               [24] 2342 	movx	@dptr,a
      000A60 02r00r31         [24] 2343 	ljmp	00162$
      000A63                       2344 00140$:
                                   2345 ;	main.c:258: puts("Command symbol received \n\r");                           /*echoes any other characters received*/
      000A63 90r03r7D         [24] 2346 	mov	dptr,#___str_45
      000A66 75 F0 80         [24] 2347 	mov	b,#0x80
      000A69 12r00r00         [24] 2348 	lcall	_puts
                                   2349 ;	main.c:259: printf("Command character= %c \n\r", character[0]);
      000A6C 90r13rC4         [24] 2350 	mov	dptr,#_main_character_65536_51
      000A6F E0               [24] 2351 	movx	a,@dptr
      000A70 FF               [12] 2352 	mov	r7,a
      000A71 7E 00            [12] 2353 	mov	r6,#0x00
      000A73 C0 07            [24] 2354 	push	ar7
      000A75 C0 06            [24] 2355 	push	ar6
      000A77 74r98            [12] 2356 	mov	a,#___str_46
      000A79 C0 E0            [24] 2357 	push	acc
      000A7B 74s03            [12] 2358 	mov	a,#(___str_46 >> 8)
      000A7D C0 E0            [24] 2359 	push	acc
      000A7F 74 80            [12] 2360 	mov	a,#0x80
      000A81 C0 E0            [24] 2361 	push	acc
      000A83 12r00r00         [24] 2362 	lcall	_printf
      000A86 E5 81            [12] 2363 	mov	a,sp
      000A88 24 FB            [12] 2364 	add	a,#0xfb
      000A8A F5 81            [12] 2365 	mov	sp,a
                                   2366 ;	main.c:263: }
      000A8C 02r00r31         [24] 2367 	ljmp	00162$
                                   2368 ;------------------------------------------------------------
                                   2369 ;Allocation info for local variables in function 'dataout'
                                   2370 ;------------------------------------------------------------
                                   2371 ;v                         Allocated with name '_dataout_v_65536_88'
                                   2372 ;ptr                       Allocated with name '_dataout_ptr_65536_89'
                                   2373 ;------------------------------------------------------------
                                   2374 ;	main.c:265: void dataout(uint8_t v){
                                   2375 ;	-----------------------------------------
                                   2376 ;	 function dataout
                                   2377 ;	-----------------------------------------
      000A8F                       2378 _dataout:
      000A8F E5 82            [12] 2379 	mov	a,dpl
      000A91 90r13rE4         [24] 2380 	mov	dptr,#_dataout_v_65536_88
      000A94 F0               [24] 2381 	movx	@dptr,a
                                   2382 ;	main.c:267: *ptr=v;
      000A95 E0               [24] 2383 	movx	a,@dptr
      000A96 FF               [12] 2384 	mov	r7,a
      000A97 7E 00            [12] 2385 	mov	r6,#0x00
      000A99 90 7F F0         [24] 2386 	mov	dptr,#0x7ff0
      000A9C EF               [12] 2387 	mov	a,r7
      000A9D F0               [24] 2388 	movx	@dptr,a
      000A9E EE               [12] 2389 	mov	a,r6
      000A9F A3               [24] 2390 	inc	dptr
      000AA0 F0               [24] 2391 	movx	@dptr,a
                                   2392 ;	main.c:269: }
      000AA1 22               [24] 2393 	ret
                                   2394 ;------------------------------------------------------------
                                   2395 ;Allocation info for local variables in function 'serial_init'
                                   2396 ;------------------------------------------------------------
                                   2397 ;	main.c:271: void serial_init(void){
                                   2398 ;	-----------------------------------------
                                   2399 ;	 function serial_init
                                   2400 ;	-----------------------------------------
      000AA2                       2401 _serial_init:
                                   2402 ;	main.c:272: TMOD=0x20;
      000AA2 75 89 20         [24] 2403 	mov	_TMOD,#0x20
                                   2404 ;	main.c:273: TH1=0xFD;
      000AA5 75 8D FD         [24] 2405 	mov	_TH1,#0xfd
                                   2406 ;	main.c:274: SCON=0x50;
      000AA8 75 98 50         [24] 2407 	mov	_SCON,#0x50
                                   2408 ;	main.c:275: TR1=1;
                                   2409 ;	assignBit
      000AAB D2 8E            [12] 2410 	setb	_TR1
                                   2411 ;	main.c:276: TI=1;
                                   2412 ;	assignBit
      000AAD D2 99            [12] 2413 	setb	_TI
                                   2414 ;	main.c:277: }
      000AAF 22               [24] 2415 	ret
                                   2416 ;------------------------------------------------------------
                                   2417 ;Allocation info for local variables in function 'hexDump'
                                   2418 ;------------------------------------------------------------
                                   2419 ;sloc0                     Allocated with name '_hexDump_sloc0_1_0'
                                   2420 ;len                       Allocated with name '_hexDump_PARM_2'
                                   2421 ;perLine                   Allocated with name '_hexDump_PARM_3'
                                   2422 ;addr                      Allocated with name '_hexDump_addr_65536_92'
                                   2423 ;i                         Allocated with name '_hexDump_i_65536_93'
                                   2424 ;buff                      Allocated with name '_hexDump_buff_65536_93'
                                   2425 ;pc                        Allocated with name '_hexDump_pc_65536_93'
                                   2426 ;------------------------------------------------------------
                                   2427 ;	main.c:279: void hexDump (const void * addr, const int len, int perLine) {
                                   2428 ;	-----------------------------------------
                                   2429 ;	 function hexDump
                                   2430 ;	-----------------------------------------
      000AB0                       2431 _hexDump:
      000AB0 AF F0            [24] 2432 	mov	r7,b
      000AB2 AE 83            [24] 2433 	mov	r6,dph
      000AB4 E5 82            [12] 2434 	mov	a,dpl
      000AB6 90r13rE9         [24] 2435 	mov	dptr,#_hexDump_addr_65536_92
      000AB9 F0               [24] 2436 	movx	@dptr,a
      000ABA EE               [12] 2437 	mov	a,r6
      000ABB A3               [24] 2438 	inc	dptr
      000ABC F0               [24] 2439 	movx	@dptr,a
      000ABD EF               [12] 2440 	mov	a,r7
      000ABE A3               [24] 2441 	inc	dptr
      000ABF F0               [24] 2442 	movx	@dptr,a
                                   2443 ;	main.c:282: const unsigned char * pc = (const unsigned char *)addr;
      000AC0 90r13rE9         [24] 2444 	mov	dptr,#_hexDump_addr_65536_92
      000AC3 E0               [24] 2445 	movx	a,@dptr
      000AC4 FD               [12] 2446 	mov	r5,a
      000AC5 A3               [24] 2447 	inc	dptr
      000AC6 E0               [24] 2448 	movx	a,@dptr
      000AC7 FE               [12] 2449 	mov	r6,a
      000AC8 A3               [24] 2450 	inc	dptr
      000AC9 E0               [24] 2451 	movx	a,@dptr
      000ACA FF               [12] 2452 	mov	r7,a
                                   2453 ;	main.c:284: for (i = 0; i < len; i+=2) {
      000ACB 90r13rE7         [24] 2454 	mov	dptr,#_hexDump_PARM_3
      000ACE E0               [24] 2455 	movx	a,@dptr
      000ACF FB               [12] 2456 	mov	r3,a
      000AD0 A3               [24] 2457 	inc	dptr
      000AD1 E0               [24] 2458 	movx	a,@dptr
      000AD2 FC               [12] 2459 	mov	r4,a
      000AD3 90r13rE5         [24] 2460 	mov	dptr,#_hexDump_PARM_2
      000AD6 E0               [24] 2461 	movx	a,@dptr
      000AD7 F9               [12] 2462 	mov	r1,a
      000AD8 A3               [24] 2463 	inc	dptr
      000AD9 E0               [24] 2464 	movx	a,@dptr
      000ADA FA               [12] 2465 	mov	r2,a
      000ADB E4               [12] 2466 	clr	a
      000ADC F5*07            [12] 2467 	mov	_hexDump_sloc0_1_0,a
      000ADE F5*08            [12] 2468 	mov	(_hexDump_sloc0_1_0 + 1),a
      000AE0                       2469 00110$:
      000AE0 C3               [12] 2470 	clr	c
      000AE1 E5*07            [12] 2471 	mov	a,_hexDump_sloc0_1_0
      000AE3 99               [12] 2472 	subb	a,r1
      000AE4 E5*08            [12] 2473 	mov	a,(_hexDump_sloc0_1_0 + 1)
      000AE6 64 80            [12] 2474 	xrl	a,#0x80
      000AE8 8A F0            [24] 2475 	mov	b,r2
      000AEA 63 F0 80         [24] 2476 	xrl	b,#0x80
      000AED 95 F0            [12] 2477 	subb	a,b
      000AEF 40 03            [24] 2478 	jc	00140$
      000AF1 02r0Cr02         [24] 2479 	ljmp	00119$
      000AF4                       2480 00140$:
                                   2481 ;	main.c:285: if ((i % perLine) == 0) {
      000AF4 90r00r00         [24] 2482 	mov	dptr,#__modsint_PARM_2
      000AF7 EB               [12] 2483 	mov	a,r3
      000AF8 F0               [24] 2484 	movx	@dptr,a
      000AF9 EC               [12] 2485 	mov	a,r4
      000AFA A3               [24] 2486 	inc	dptr
      000AFB F0               [24] 2487 	movx	@dptr,a
      000AFC 85*07 82         [24] 2488 	mov	dpl,_hexDump_sloc0_1_0
      000AFF 85*08 83         [24] 2489 	mov	dph,(_hexDump_sloc0_1_0 + 1)
      000B02 C0 07            [24] 2490 	push	ar7
      000B04 C0 06            [24] 2491 	push	ar6
      000B06 C0 05            [24] 2492 	push	ar5
      000B08 C0 04            [24] 2493 	push	ar4
      000B0A C0 03            [24] 2494 	push	ar3
      000B0C C0 02            [24] 2495 	push	ar2
      000B0E C0 01            [24] 2496 	push	ar1
      000B10 12r00r00         [24] 2497 	lcall	__modsint
      000B13 E5 82            [12] 2498 	mov	a,dpl
      000B15 85 83 F0         [24] 2499 	mov	b,dph
      000B18 D0 01            [24] 2500 	pop	ar1
      000B1A D0 02            [24] 2501 	pop	ar2
      000B1C D0 03            [24] 2502 	pop	ar3
      000B1E D0 04            [24] 2503 	pop	ar4
      000B20 D0 05            [24] 2504 	pop	ar5
      000B22 D0 06            [24] 2505 	pop	ar6
      000B24 D0 07            [24] 2506 	pop	ar7
      000B26 45 F0            [12] 2507 	orl	a,b
      000B28 70 77            [24] 2508 	jnz	00104$
                                   2509 ;	main.c:286: if (i != 0) printf ("  %s\n\r", buff);
      000B2A E5*07            [12] 2510 	mov	a,_hexDump_sloc0_1_0
      000B2C 45*08            [12] 2511 	orl	a,(_hexDump_sloc0_1_0 + 1)
      000B2E 60 3C            [24] 2512 	jz	00102$
      000B30 C0 07            [24] 2513 	push	ar7
      000B32 C0 06            [24] 2514 	push	ar6
      000B34 C0 05            [24] 2515 	push	ar5
      000B36 C0 04            [24] 2516 	push	ar4
      000B38 C0 03            [24] 2517 	push	ar3
      000B3A C0 02            [24] 2518 	push	ar2
      000B3C C0 01            [24] 2519 	push	ar1
      000B3E 74rEC            [12] 2520 	mov	a,#_hexDump_buff_65536_93
      000B40 C0 E0            [24] 2521 	push	acc
      000B42 74s13            [12] 2522 	mov	a,#(_hexDump_buff_65536_93 >> 8)
      000B44 C0 E0            [24] 2523 	push	acc
      000B46 E4               [12] 2524 	clr	a
      000B47 C0 E0            [24] 2525 	push	acc
      000B49 74r30            [12] 2526 	mov	a,#___str_58
      000B4B C0 E0            [24] 2527 	push	acc
      000B4D 74s06            [12] 2528 	mov	a,#(___str_58 >> 8)
      000B4F C0 E0            [24] 2529 	push	acc
      000B51 74 80            [12] 2530 	mov	a,#0x80
      000B53 C0 E0            [24] 2531 	push	acc
      000B55 12r00r00         [24] 2532 	lcall	_printf
      000B58 E5 81            [12] 2533 	mov	a,sp
      000B5A 24 FA            [12] 2534 	add	a,#0xfa
      000B5C F5 81            [12] 2535 	mov	sp,a
      000B5E D0 01            [24] 2536 	pop	ar1
      000B60 D0 02            [24] 2537 	pop	ar2
      000B62 D0 03            [24] 2538 	pop	ar3
      000B64 D0 04            [24] 2539 	pop	ar4
      000B66 D0 05            [24] 2540 	pop	ar5
      000B68 D0 06            [24] 2541 	pop	ar6
      000B6A D0 07            [24] 2542 	pop	ar7
      000B6C                       2543 00102$:
                                   2544 ;	main.c:287: printf ("  %04x ", i);
      000B6C C0 07            [24] 2545 	push	ar7
      000B6E C0 06            [24] 2546 	push	ar6
      000B70 C0 05            [24] 2547 	push	ar5
      000B72 C0 04            [24] 2548 	push	ar4
      000B74 C0 03            [24] 2549 	push	ar3
      000B76 C0 02            [24] 2550 	push	ar2
      000B78 C0 01            [24] 2551 	push	ar1
      000B7A C0*07            [24] 2552 	push	_hexDump_sloc0_1_0
      000B7C C0*08            [24] 2553 	push	(_hexDump_sloc0_1_0 + 1)
      000B7E 74r37            [12] 2554 	mov	a,#___str_59
      000B80 C0 E0            [24] 2555 	push	acc
      000B82 74s06            [12] 2556 	mov	a,#(___str_59 >> 8)
      000B84 C0 E0            [24] 2557 	push	acc
      000B86 74 80            [12] 2558 	mov	a,#0x80
      000B88 C0 E0            [24] 2559 	push	acc
      000B8A 12r00r00         [24] 2560 	lcall	_printf
      000B8D E5 81            [12] 2561 	mov	a,sp
      000B8F 24 FB            [12] 2562 	add	a,#0xfb
      000B91 F5 81            [12] 2563 	mov	sp,a
      000B93 D0 01            [24] 2564 	pop	ar1
      000B95 D0 02            [24] 2565 	pop	ar2
      000B97 D0 03            [24] 2566 	pop	ar3
      000B99 D0 04            [24] 2567 	pop	ar4
      000B9B D0 05            [24] 2568 	pop	ar5
      000B9D D0 06            [24] 2569 	pop	ar6
      000B9F D0 07            [24] 2570 	pop	ar7
      000BA1                       2571 00104$:
                                   2572 ;	main.c:289: printf (" %02x", pc[i]);
      000BA1 C0 01            [24] 2573 	push	ar1
      000BA3 C0 02            [24] 2574 	push	ar2
      000BA5 E5*07            [12] 2575 	mov	a,_hexDump_sloc0_1_0
      000BA7 2D               [12] 2576 	add	a,r5
      000BA8 F8               [12] 2577 	mov	r0,a
      000BA9 E5*08            [12] 2578 	mov	a,(_hexDump_sloc0_1_0 + 1)
      000BAB 3E               [12] 2579 	addc	a,r6
      000BAC F9               [12] 2580 	mov	r1,a
      000BAD 8F 02            [24] 2581 	mov	ar2,r7
      000BAF 88 82            [24] 2582 	mov	dpl,r0
      000BB1 89 83            [24] 2583 	mov	dph,r1
      000BB3 8A F0            [24] 2584 	mov	b,r2
      000BB5 12r00r00         [24] 2585 	lcall	__gptrget
      000BB8 F8               [12] 2586 	mov	r0,a
      000BB9 7A 00            [12] 2587 	mov	r2,#0x00
      000BBB C0 07            [24] 2588 	push	ar7
      000BBD C0 06            [24] 2589 	push	ar6
      000BBF C0 05            [24] 2590 	push	ar5
      000BC1 C0 04            [24] 2591 	push	ar4
      000BC3 C0 03            [24] 2592 	push	ar3
      000BC5 C0 02            [24] 2593 	push	ar2
      000BC7 C0 01            [24] 2594 	push	ar1
      000BC9 C0 00            [24] 2595 	push	ar0
      000BCB C0 02            [24] 2596 	push	ar2
      000BCD 74r3F            [12] 2597 	mov	a,#___str_60
      000BCF C0 E0            [24] 2598 	push	acc
      000BD1 74s06            [12] 2599 	mov	a,#(___str_60 >> 8)
      000BD3 C0 E0            [24] 2600 	push	acc
      000BD5 74 80            [12] 2601 	mov	a,#0x80
      000BD7 C0 E0            [24] 2602 	push	acc
      000BD9 12r00r00         [24] 2603 	lcall	_printf
      000BDC E5 81            [12] 2604 	mov	a,sp
      000BDE 24 FB            [12] 2605 	add	a,#0xfb
      000BE0 F5 81            [12] 2606 	mov	sp,a
      000BE2 D0 01            [24] 2607 	pop	ar1
      000BE4 D0 02            [24] 2608 	pop	ar2
      000BE6 D0 03            [24] 2609 	pop	ar3
      000BE8 D0 04            [24] 2610 	pop	ar4
      000BEA D0 05            [24] 2611 	pop	ar5
      000BEC D0 06            [24] 2612 	pop	ar6
      000BEE D0 07            [24] 2613 	pop	ar7
                                   2614 ;	main.c:284: for (i = 0; i < len; i+=2) {
      000BF0 74 02            [12] 2615 	mov	a,#0x02
      000BF2 25*07            [12] 2616 	add	a,_hexDump_sloc0_1_0
      000BF4 F5*07            [12] 2617 	mov	_hexDump_sloc0_1_0,a
      000BF6 E4               [12] 2618 	clr	a
      000BF7 35*08            [12] 2619 	addc	a,(_hexDump_sloc0_1_0 + 1)
      000BF9 F5*08            [12] 2620 	mov	(_hexDump_sloc0_1_0 + 1),a
      000BFB D0 02            [24] 2621 	pop	ar2
      000BFD D0 01            [24] 2622 	pop	ar1
      000BFF 02r0ArE0         [24] 2623 	ljmp	00110$
                                   2624 ;	main.c:291: while ((i % perLine) != 0) {
      000C02                       2625 00119$:
      000C02 8B 06            [24] 2626 	mov	ar6,r3
      000C04 8C 07            [24] 2627 	mov	ar7,r4
      000C06 AC*07            [24] 2628 	mov	r4,_hexDump_sloc0_1_0
      000C08 AD*08            [24] 2629 	mov	r5,(_hexDump_sloc0_1_0 + 1)
      000C0A                       2630 00106$:
      000C0A 90r00r00         [24] 2631 	mov	dptr,#__modsint_PARM_2
      000C0D EE               [12] 2632 	mov	a,r6
      000C0E F0               [24] 2633 	movx	@dptr,a
      000C0F EF               [12] 2634 	mov	a,r7
      000C10 A3               [24] 2635 	inc	dptr
      000C11 F0               [24] 2636 	movx	@dptr,a
      000C12 8C 82            [24] 2637 	mov	dpl,r4
      000C14 8D 83            [24] 2638 	mov	dph,r5
      000C16 C0 07            [24] 2639 	push	ar7
      000C18 C0 06            [24] 2640 	push	ar6
      000C1A C0 05            [24] 2641 	push	ar5
      000C1C C0 04            [24] 2642 	push	ar4
      000C1E 12r00r00         [24] 2643 	lcall	__modsint
      000C21 E5 82            [12] 2644 	mov	a,dpl
      000C23 85 83 F0         [24] 2645 	mov	b,dph
      000C26 D0 04            [24] 2646 	pop	ar4
      000C28 D0 05            [24] 2647 	pop	ar5
      000C2A D0 06            [24] 2648 	pop	ar6
      000C2C D0 07            [24] 2649 	pop	ar7
      000C2E 45 F0            [12] 2650 	orl	a,b
      000C30 60 2C            [24] 2651 	jz	00112$
                                   2652 ;	main.c:292: printf ("   ");
      000C32 C0 07            [24] 2653 	push	ar7
      000C34 C0 06            [24] 2654 	push	ar6
      000C36 C0 05            [24] 2655 	push	ar5
      000C38 C0 04            [24] 2656 	push	ar4
      000C3A 74r45            [12] 2657 	mov	a,#___str_61
      000C3C C0 E0            [24] 2658 	push	acc
      000C3E 74s06            [12] 2659 	mov	a,#(___str_61 >> 8)
      000C40 C0 E0            [24] 2660 	push	acc
      000C42 74 80            [12] 2661 	mov	a,#0x80
      000C44 C0 E0            [24] 2662 	push	acc
      000C46 12r00r00         [24] 2663 	lcall	_printf
      000C49 15 81            [12] 2664 	dec	sp
      000C4B 15 81            [12] 2665 	dec	sp
      000C4D 15 81            [12] 2666 	dec	sp
      000C4F D0 04            [24] 2667 	pop	ar4
      000C51 D0 05            [24] 2668 	pop	ar5
      000C53 D0 06            [24] 2669 	pop	ar6
      000C55 D0 07            [24] 2670 	pop	ar7
                                   2671 ;	main.c:293: i++;
      000C57 0C               [12] 2672 	inc	r4
      000C58 BC 00 AF         [24] 2673 	cjne	r4,#0x00,00106$
      000C5B 0D               [12] 2674 	inc	r5
      000C5C 80 AC            [24] 2675 	sjmp	00106$
      000C5E                       2676 00112$:
                                   2677 ;	main.c:296: }
      000C5E 22               [24] 2678 	ret
                                   2679 ;------------------------------------------------------------
                                   2680 ;Allocation info for local variables in function 'putchar'
                                   2681 ;------------------------------------------------------------
                                   2682 ;c                         Allocated with name '_putchar_c_65536_98'
                                   2683 ;------------------------------------------------------------
                                   2684 ;	main.c:299: int putchar (int c)
                                   2685 ;	-----------------------------------------
                                   2686 ;	 function putchar
                                   2687 ;	-----------------------------------------
      000C5F                       2688 _putchar:
      000C5F AF 83            [24] 2689 	mov	r7,dph
      000C61 E5 82            [12] 2690 	mov	a,dpl
      000C63 90r13rFD         [24] 2691 	mov	dptr,#_putchar_c_65536_98
      000C66 F0               [24] 2692 	movx	@dptr,a
      000C67 EF               [12] 2693 	mov	a,r7
      000C68 A3               [24] 2694 	inc	dptr
      000C69 F0               [24] 2695 	movx	@dptr,a
                                   2696 ;	main.c:301: while (!TI);
      000C6A                       2697 00101$:
      000C6A 30 99 FD         [24] 2698 	jnb	_TI,00101$
                                   2699 ;	main.c:302: while (TI == 0);
      000C6D                       2700 00104$:
      000C6D 30 99 FD         [24] 2701 	jnb	_TI,00104$
                                   2702 ;	main.c:303: while ((SCON & 0x02) == 0);
      000C70                       2703 00107$:
      000C70 E5 98            [12] 2704 	mov	a,_SCON
      000C72 30 E1 FB         [24] 2705 	jnb	acc.1,00107$
                                   2706 ;	main.c:305: SBUF = c;           // load serial port with transmit value
      000C75 90r13rFD         [24] 2707 	mov	dptr,#_putchar_c_65536_98
      000C78 E0               [24] 2708 	movx	a,@dptr
      000C79 FE               [12] 2709 	mov	r6,a
      000C7A A3               [24] 2710 	inc	dptr
      000C7B E0               [24] 2711 	movx	a,@dptr
      000C7C FF               [12] 2712 	mov	r7,a
      000C7D 8E 99            [24] 2713 	mov	_SBUF,r6
                                   2714 ;	main.c:306: TI = 0;             // clear TI flag
                                   2715 ;	assignBit
      000C7F C2 99            [12] 2716 	clr	_TI
                                   2717 ;	main.c:308: return c;
      000C81 8E 82            [24] 2718 	mov	dpl,r6
      000C83 8F 83            [24] 2719 	mov	dph,r7
                                   2720 ;	main.c:309: }
      000C85 22               [24] 2721 	ret
                                   2722 ;------------------------------------------------------------
                                   2723 ;Allocation info for local variables in function 'getchar'
                                   2724 ;------------------------------------------------------------
                                   2725 ;	main.c:311: int getchar (void)
                                   2726 ;	-----------------------------------------
                                   2727 ;	 function getchar
                                   2728 ;	-----------------------------------------
      000C86                       2729 _getchar:
                                   2730 ;	main.c:313: while (!RI);
      000C86                       2731 00101$:
      000C86 30 98 FD         [24] 2732 	jnb	_RI,00101$
                                   2733 ;	main.c:314: while ((SCON & 0x01) == 0);
      000C89                       2734 00104$:
      000C89 E5 98            [12] 2735 	mov	a,_SCON
      000C8B 30 E0 FB         [24] 2736 	jnb	acc.0,00104$
                                   2737 ;	main.c:315: while (RI == 0);
      000C8E                       2738 00107$:
                                   2739 ;	main.c:317: RI = 0;                         // clear RI flag
                                   2740 ;	assignBit
      000C8E 10 98 02         [24] 2741 	jbc	_RI,00130$
      000C91 80 FB            [24] 2742 	sjmp	00107$
      000C93                       2743 00130$:
                                   2744 ;	main.c:318: return SBUF;                    // return character from SBUF
      000C93 AE 99            [24] 2745 	mov	r6,_SBUF
      000C95 7F 00            [12] 2746 	mov	r7,#0x00
      000C97 8E 82            [24] 2747 	mov	dpl,r6
      000C99 8F 83            [24] 2748 	mov	dph,r7
                                   2749 ;	main.c:319: }
      000C9B 22               [24] 2750 	ret
                                   2751 ;------------------------------------------------------------
                                   2752 ;Allocation info for local variables in function 'putstr'
                                   2753 ;------------------------------------------------------------
                                   2754 ;s                         Allocated with name '_putstr_s_65536_102'
                                   2755 ;i                         Allocated with name '_putstr_i_65536_103'
                                   2756 ;------------------------------------------------------------
                                   2757 ;	main.c:321: int putstr (char *s)
                                   2758 ;	-----------------------------------------
                                   2759 ;	 function putstr
                                   2760 ;	-----------------------------------------
      000C9C                       2761 _putstr:
      000C9C AF F0            [24] 2762 	mov	r7,b
      000C9E AE 83            [24] 2763 	mov	r6,dph
      000CA0 E5 82            [12] 2764 	mov	a,dpl
      000CA2 90r13rFF         [24] 2765 	mov	dptr,#_putstr_s_65536_102
      000CA5 F0               [24] 2766 	movx	@dptr,a
      000CA6 EE               [12] 2767 	mov	a,r6
      000CA7 A3               [24] 2768 	inc	dptr
      000CA8 F0               [24] 2769 	movx	@dptr,a
      000CA9 EF               [12] 2770 	mov	a,r7
      000CAA A3               [24] 2771 	inc	dptr
      000CAB F0               [24] 2772 	movx	@dptr,a
                                   2773 ;	main.c:324: while (*s){            // output characters until NULL found
      000CAC 90r13rFF         [24] 2774 	mov	dptr,#_putstr_s_65536_102
      000CAF E0               [24] 2775 	movx	a,@dptr
      000CB0 FD               [12] 2776 	mov	r5,a
      000CB1 A3               [24] 2777 	inc	dptr
      000CB2 E0               [24] 2778 	movx	a,@dptr
      000CB3 FE               [12] 2779 	mov	r6,a
      000CB4 A3               [24] 2780 	inc	dptr
      000CB5 E0               [24] 2781 	movx	a,@dptr
      000CB6 FF               [12] 2782 	mov	r7,a
      000CB7 7B 00            [12] 2783 	mov	r3,#0x00
      000CB9 7C 00            [12] 2784 	mov	r4,#0x00
      000CBB                       2785 00101$:
      000CBB 8D 82            [24] 2786 	mov	dpl,r5
      000CBD 8E 83            [24] 2787 	mov	dph,r6
      000CBF 8F F0            [24] 2788 	mov	b,r7
      000CC1 12r00r00         [24] 2789 	lcall	__gptrget
      000CC4 FA               [12] 2790 	mov	r2,a
      000CC5 60 36            [24] 2791 	jz	00108$
                                   2792 ;	main.c:325: putchar(*s++);
      000CC7 0D               [12] 2793 	inc	r5
      000CC8 BD 00 01         [24] 2794 	cjne	r5,#0x00,00116$
      000CCB 0E               [12] 2795 	inc	r6
      000CCC                       2796 00116$:
      000CCC 90r13rFF         [24] 2797 	mov	dptr,#_putstr_s_65536_102
      000CCF ED               [12] 2798 	mov	a,r5
      000CD0 F0               [24] 2799 	movx	@dptr,a
      000CD1 EE               [12] 2800 	mov	a,r6
      000CD2 A3               [24] 2801 	inc	dptr
      000CD3 F0               [24] 2802 	movx	@dptr,a
      000CD4 EF               [12] 2803 	mov	a,r7
      000CD5 A3               [24] 2804 	inc	dptr
      000CD6 F0               [24] 2805 	movx	@dptr,a
      000CD7 8A 01            [24] 2806 	mov	ar1,r2
      000CD9 7A 00            [12] 2807 	mov	r2,#0x00
      000CDB 89 82            [24] 2808 	mov	dpl,r1
      000CDD 8A 83            [24] 2809 	mov	dph,r2
      000CDF C0 07            [24] 2810 	push	ar7
      000CE1 C0 06            [24] 2811 	push	ar6
      000CE3 C0 05            [24] 2812 	push	ar5
      000CE5 C0 04            [24] 2813 	push	ar4
      000CE7 C0 03            [24] 2814 	push	ar3
      000CE9 12r0Cr5F         [24] 2815 	lcall	_putchar
      000CEC D0 03            [24] 2816 	pop	ar3
      000CEE D0 04            [24] 2817 	pop	ar4
      000CF0 D0 05            [24] 2818 	pop	ar5
      000CF2 D0 06            [24] 2819 	pop	ar6
      000CF4 D0 07            [24] 2820 	pop	ar7
                                   2821 ;	main.c:326: i++;
      000CF6 0B               [12] 2822 	inc	r3
      000CF7 BB 00 C1         [24] 2823 	cjne	r3,#0x00,00101$
      000CFA 0C               [12] 2824 	inc	r4
      000CFB 80 BE            [24] 2825 	sjmp	00101$
      000CFD                       2826 00108$:
      000CFD 90r13rFF         [24] 2827 	mov	dptr,#_putstr_s_65536_102
      000D00 ED               [12] 2828 	mov	a,r5
      000D01 F0               [24] 2829 	movx	@dptr,a
      000D02 EE               [12] 2830 	mov	a,r6
      000D03 A3               [24] 2831 	inc	dptr
      000D04 F0               [24] 2832 	movx	@dptr,a
      000D05 EF               [12] 2833 	mov	a,r7
      000D06 A3               [24] 2834 	inc	dptr
      000D07 F0               [24] 2835 	movx	@dptr,a
                                   2836 ;	main.c:328: return i+1;
      000D08 0B               [12] 2837 	inc	r3
      000D09 BB 00 01         [24] 2838 	cjne	r3,#0x00,00118$
      000D0C 0C               [12] 2839 	inc	r4
      000D0D                       2840 00118$:
      000D0D 8B 82            [24] 2841 	mov	dpl,r3
      000D0F 8C 83            [24] 2842 	mov	dph,r4
                                   2843 ;	main.c:329: }
      000D11 22               [24] 2844 	ret
                                   2845 ;------------------------------------------------------------
                                   2846 ;Allocation info for local variables in function 'getstr'
                                   2847 ;------------------------------------------------------------
                                   2848 ;a                         Allocated with name '_getstr_a_65536_105'
                                   2849 ;i                         Allocated with name '_getstr_i_65536_106'
                                   2850 ;------------------------------------------------------------
                                   2851 ;	main.c:331: int getstr(char *a)
                                   2852 ;	-----------------------------------------
                                   2853 ;	 function getstr
                                   2854 ;	-----------------------------------------
      000D12                       2855 _getstr:
      000D12 AF F0            [24] 2856 	mov	r7,b
      000D14 AE 83            [24] 2857 	mov	r6,dph
      000D16 E5 82            [12] 2858 	mov	a,dpl
      000D18 90r14r02         [24] 2859 	mov	dptr,#_getstr_a_65536_105
      000D1B F0               [24] 2860 	movx	@dptr,a
      000D1C EE               [12] 2861 	mov	a,r6
      000D1D A3               [24] 2862 	inc	dptr
      000D1E F0               [24] 2863 	movx	@dptr,a
      000D1F EF               [12] 2864 	mov	a,r7
      000D20 A3               [24] 2865 	inc	dptr
      000D21 F0               [24] 2866 	movx	@dptr,a
                                   2867 ;	main.c:335: do{
      000D22 7E 00            [12] 2868 	mov	r6,#0x00
      000D24 7F 00            [12] 2869 	mov	r7,#0x00
      000D26 90r14r02         [24] 2870 	mov	dptr,#_getstr_a_65536_105
      000D29 E0               [24] 2871 	movx	a,@dptr
      000D2A FB               [12] 2872 	mov	r3,a
      000D2B A3               [24] 2873 	inc	dptr
      000D2C E0               [24] 2874 	movx	a,@dptr
      000D2D FC               [12] 2875 	mov	r4,a
      000D2E A3               [24] 2876 	inc	dptr
      000D2F E0               [24] 2877 	movx	a,@dptr
      000D30 FD               [12] 2878 	mov	r5,a
      000D31                       2879 00101$:
                                   2880 ;	main.c:336: *a = getchar();
      000D31 C0 07            [24] 2881 	push	ar7
      000D33 C0 06            [24] 2882 	push	ar6
      000D35 C0 05            [24] 2883 	push	ar5
      000D37 C0 04            [24] 2884 	push	ar4
      000D39 C0 03            [24] 2885 	push	ar3
      000D3B 12r0Cr86         [24] 2886 	lcall	_getchar
      000D3E A9 82            [24] 2887 	mov	r1,dpl
      000D40 D0 03            [24] 2888 	pop	ar3
      000D42 D0 04            [24] 2889 	pop	ar4
      000D44 D0 05            [24] 2890 	pop	ar5
      000D46 D0 06            [24] 2891 	pop	ar6
      000D48 D0 07            [24] 2892 	pop	ar7
      000D4A 8B 82            [24] 2893 	mov	dpl,r3
      000D4C 8C 83            [24] 2894 	mov	dph,r4
      000D4E 8D F0            [24] 2895 	mov	b,r5
      000D50 E9               [12] 2896 	mov	a,r1
      000D51 12r00r00         [24] 2897 	lcall	__gptrput
      000D54 A3               [24] 2898 	inc	dptr
      000D55 AB 82            [24] 2899 	mov	r3,dpl
      000D57 AC 83            [24] 2900 	mov	r4,dph
                                   2901 ;	main.c:337: i++;
      000D59 0E               [12] 2902 	inc	r6
      000D5A BE 00 01         [24] 2903 	cjne	r6,#0x00,00115$
      000D5D 0F               [12] 2904 	inc	r7
      000D5E                       2905 00115$:
                                   2906 ;	main.c:338: }while(*a++ != '\r');
      000D5E 90r14r02         [24] 2907 	mov	dptr,#_getstr_a_65536_105
      000D61 EB               [12] 2908 	mov	a,r3
      000D62 F0               [24] 2909 	movx	@dptr,a
      000D63 EC               [12] 2910 	mov	a,r4
      000D64 A3               [24] 2911 	inc	dptr
      000D65 F0               [24] 2912 	movx	@dptr,a
      000D66 ED               [12] 2913 	mov	a,r5
      000D67 A3               [24] 2914 	inc	dptr
      000D68 F0               [24] 2915 	movx	@dptr,a
      000D69 B9 0D C5         [24] 2916 	cjne	r1,#0x0d,00101$
                                   2917 ;	main.c:340: *a = '\0';
      000D6C 90r14r02         [24] 2918 	mov	dptr,#_getstr_a_65536_105
      000D6F EB               [12] 2919 	mov	a,r3
      000D70 F0               [24] 2920 	movx	@dptr,a
      000D71 EC               [12] 2921 	mov	a,r4
      000D72 A3               [24] 2922 	inc	dptr
      000D73 F0               [24] 2923 	movx	@dptr,a
      000D74 ED               [12] 2924 	mov	a,r5
      000D75 A3               [24] 2925 	inc	dptr
      000D76 F0               [24] 2926 	movx	@dptr,a
      000D77 8B 82            [24] 2927 	mov	dpl,r3
      000D79 8C 83            [24] 2928 	mov	dph,r4
      000D7B 8D F0            [24] 2929 	mov	b,r5
      000D7D E4               [12] 2930 	clr	a
      000D7E 12r00r00         [24] 2931 	lcall	__gptrput
                                   2932 ;	main.c:341: return i+1;
      000D81 0E               [12] 2933 	inc	r6
      000D82 BE 00 01         [24] 2934 	cjne	r6,#0x00,00118$
      000D85 0F               [12] 2935 	inc	r7
      000D86                       2936 00118$:
      000D86 8E 82            [24] 2937 	mov	dpl,r6
      000D88 8F 83            [24] 2938 	mov	dph,r7
                                   2939 ;	main.c:342: }
      000D8A 22               [24] 2940 	ret
                                   2941 	.area CSEG    (CODE)
                                   2942 	.area CONST   (CODE)
      000000                       2943 ___sdcc_heap_size:
      000000 C0 12                 2944 	.byte #0xc0, #0x12	; 4800
                                   2945 	.area CONST   (CODE)
      000002                       2946 ___str_8:
      000002 73 69 7A 65 20 65 6E  2947 	.ascii "size entered= %d "
             74 65 72 65 64 3D 20
             25 64 20
      000013 0A                    2948 	.db 0x0a
      000014 0D                    2949 	.db 0x0d
      000015 00                    2950 	.db 0x00
                                   2951 	.area CSEG    (CODE)
                                   2952 	.area CONST   (CODE)
      000016                       2953 ___str_9:
      000016 42 75 66 66 65 72 30  2954 	.ascii "Buffer0 at location %p has size %d"
             20 61 74 20 6C 6F 63
             61 74 69 6F 6E 20 25
             70 20 68 61 73 20 73
             69 7A 65 20 25 64
      000038 0A                    2955 	.db 0x0a
      000039 0D                    2956 	.db 0x0d
      00003A 00                    2957 	.db 0x00
                                   2958 	.area CSEG    (CODE)
                                   2959 	.area CONST   (CODE)
      00003B                       2960 ___str_10:
      00003B 42 75 66 66 65 72 31  2961 	.ascii "Buffer1 at location %p has size %d"
             20 61 74 20 6C 6F 63
             61 74 69 6F 6E 20 25
             70 20 68 61 73 20 73
             69 7A 65 20 25 64
      00005D 0A                    2962 	.db 0x0a
      00005E 0D                    2963 	.db 0x0d
      00005F 00                    2964 	.db 0x00
                                   2965 	.area CSEG    (CODE)
                                   2966 	.area CONST   (CODE)
      000060                       2967 ___str_11:
      000060 46 41 49 4C 49 4E 47  2968 	.ascii "FAILING HERE"
             20 48 45 52 45
      00006C 00                    2969 	.db 0x00
                                   2970 	.area CSEG    (CODE)
                                   2971 	.area CONST   (CODE)
      00006D                       2972 ___str_12:
      00006D 62 75 66 66 65 72 30  2973 	.ascii "buffer0 & buffer1 not initialized"
             20 26 20 62 75 66 66
             65 72 31 20 6E 6F 74
             20 69 6E 69 74 69 61
             6C 69 7A 65 64
      00008E 0A                    2974 	.db 0x0a
      00008F 0D                    2975 	.db 0x0d
      000090 00                    2976 	.db 0x00
                                   2977 	.area CSEG    (CODE)
                                   2978 	.area CONST   (CODE)
      000091                       2979 ___str_13:
      000091 3C 3C 45 6E 74 65 72  2980 	.ascii "<<Enter command for operation>>"
             20 63 6F 6D 6D 61 6E
             64 20 66 6F 72 20 6F
             70 65 72 61 74 69 6F
             6E 3E 3E
      0000B0 0A                    2981 	.db 0x0a
      0000B1 0D                    2982 	.db 0x0d
      0000B2 00                    2983 	.db 0x00
                                   2984 	.area CSEG    (CODE)
                                   2985 	.area CONST   (CODE)
      0000B3                       2986 ___str_14:
      0000B3 73 74 6F 72 61 67 65  2987 	.ascii "storage character entered"
             20 63 68 61 72 61 63
             74 65 72 20 65 6E 74
             65 72 65 64
      0000CC 0A                    2988 	.db 0x0a
      0000CD 0D                    2989 	.db 0x0d
      0000CE 00                    2990 	.db 0x00
                                   2991 	.area CSEG    (CODE)
                                   2992 	.area CONST   (CODE)
      0000CF                       2993 ___str_15:
      0000CF 6E 6F 20 73 70 61 63  2994 	.ascii "no space in buffer0"
             65 20 69 6E 20 62 75
             66 66 65 72 30
      0000E2 00                    2995 	.db 0x00
                                   2996 	.area CSEG    (CODE)
                                   2997 	.area CONST   (CODE)
      0000E3                       2998 ___str_16:
      0000E3 73 74 6F 72 61 67 65  2999 	.ascii "storage character received= %c "
             20 63 68 61 72 61 63
             74 65 72 20 72 65 63
             65 69 76 65 64 3D 20
             25 63 20
      000102 0A                    3000 	.db 0x0a
      000103 0D                    3001 	.db 0x0d
      000104 00                    3002 	.db 0x00
                                   3003 	.area CSEG    (CODE)
                                   3004 	.area CONST   (CODE)
      000105                       3005 ___str_19:
      000105 6E 65 77 20 62 75 66  3006 	.ascii "new buffer%d at location %p has size %d"
             66 65 72 25 64 20 61
             74 20 6C 6F 63 61 74
             69 6F 6E 20 25 70 20
             68 61 73 20 73 69 7A
             65 20 25 64
      00012C 0A                    3007 	.db 0x0a
      00012D 0D                    3008 	.db 0x0d
      00012E 00                    3009 	.db 0x00
                                   3010 	.area CSEG    (CODE)
                                   3011 	.area CONST   (CODE)
      00012F                       3012 ___str_20:
      00012F 41 6C 6C 6F 63 61 74  3013 	.ascii "Allocation limit reached"
             69 6F 6E 20 6C 69 6D
             69 74 20 72 65 61 63
             68 65 64
      000147 0A                    3014 	.db 0x0a
      000148 0D                    3015 	.db 0x0d
      000149 00                    3016 	.db 0x00
                                   3017 	.area CSEG    (CODE)
                                   3018 	.area CONST   (CODE)
      00014A                       3019 ___str_21:
      00014A 45 6E 74 65 72 20 62  3020 	.ascii "Enter buffer size between 30 & 300"
             75 66 66 65 72 20 73
             69 7A 65 20 62 65 74
             77 65 65 6E 20 33 30
             20 26 20 33 30 30
      00016C 0A                    3021 	.db 0x0a
      00016D 0D                    3022 	.db 0x0d
      00016E 00                    3023 	.db 0x00
                                   3024 	.area CSEG    (CODE)
                                   3025 	.area CONST   (CODE)
      00016F                       3026 ___str_24:
      00016F 43 61 6E 6E 6F 74 20  3027 	.ascii "Cannot delete buffer0 "
             64 65 6C 65 74 65 20
             62 75 66 66 65 72 30
             20
      000185 0A                    3028 	.db 0x0a
      000186 0D                    3029 	.db 0x0d
      000187 00                    3030 	.db 0x00
                                   3031 	.area CSEG    (CODE)
                                   3032 	.area CONST   (CODE)
      000188                       3033 ___str_25:
      000188 53 69 7A 65 20 6F 66  3034 	.ascii "Size of deleted Buffer %d"
             20 64 65 6C 65 74 65
             64 20 42 75 66 66 65
             72 20 25 64
      0001A1 00                    3035 	.db 0x00
                                   3036 	.area CSEG    (CODE)
                                   3037 	.area CONST   (CODE)
      0001A2                       3038 ___str_26:
      0001A2 44 65 6C 65 74 65 64  3039 	.ascii "Deleted the buffer %d "
             20 74 68 65 20 62 75
             66 66 65 72 20 25 64
             20
      0001B8 0A                    3040 	.db 0x0a
      0001B9 0D                    3041 	.db 0x0d
      0001BA 00                    3042 	.db 0x00
                                   3043 	.area CSEG    (CODE)
                                   3044 	.area CONST   (CODE)
      0001BB                       3045 ___str_27:
      0001BB 3F 20 53 79 6D 62 6F  3046 	.ascii "? Symbol received "
             6C 20 72 65 63 65 69
             76 65 64 20
      0001CD 0A                    3047 	.db 0x0a
      0001CE 0D                    3048 	.db 0x0d
      0001CF 00                    3049 	.db 0x00
                                   3050 	.area CSEG    (CODE)
                                   3051 	.area CONST   (CODE)
      0001D0                       3052 ___str_28:
      0001D0 54 6F 74 61 6C 20 6E  3053 	.ascii "Total number of characters received since last ?= %d "
             75 6D 62 65 72 20 6F
             66 20 63 68 61 72 61
             63 74 65 72 73 20 72
             65 63 65 69 76 65 64
             20 73 69 6E 63 65 20
             6C 61 73 74 20 3F 3D
             20 25 64 20
      000205 0A                    3054 	.db 0x0a
      000206 0D                    3055 	.db 0x0d
      000207 00                    3056 	.db 0x00
                                   3057 	.area CSEG    (CODE)
                                   3058 	.area CONST   (CODE)
      000208                       3059 ___str_29:
      000208 2D 2D 2D 2D 2D 2D 2D  3060 	.ascii "--------------------Buffer0 details------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 42
             75 66 66 65 72 30 20
             64 65 74 61 69 6C 73
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D
      000243 0A                    3061 	.db 0x0a
      000244 0D                    3062 	.db 0x0d
      000245 00                    3063 	.db 0x00
                                   3064 	.area CSEG    (CODE)
                                   3065 	.area CONST   (CODE)
      000246                       3066 ___str_30:
      000246 42 75 66 66 65 72 20  3067 	.ascii "Buffer number= %d "
             6E 75 6D 62 65 72 3D
             20 25 64 20
      000258 0A                    3068 	.db 0x0a
      000259 0D                    3069 	.db 0x0d
      00025A 00                    3070 	.db 0x00
                                   3071 	.area CSEG    (CODE)
                                   3072 	.area CONST   (CODE)
      00025B                       3073 ___str_31:
      00025B 42 75 66 66 65 72 20  3074 	.ascii "Buffer start address= %p "
             73 74 61 72 74 20 61
             64 64 72 65 73 73 3D
             20 25 70 20
      000274 0A                    3075 	.db 0x0a
      000275 0D                    3076 	.db 0x0d
      000276 00                    3077 	.db 0x00
                                   3078 	.area CSEG    (CODE)
                                   3079 	.area CONST   (CODE)
      000277                       3080 ___str_32:
      000277 42 75 66 66 65 72 20  3081 	.ascii "Buffer end address= %p "
             65 6E 64 20 61 64 64
             72 65 73 73 3D 20 25
             70 20
      00028E 0A                    3082 	.db 0x0a
      00028F 0D                    3083 	.db 0x0d
      000290 00                    3084 	.db 0x00
                                   3085 	.area CSEG    (CODE)
                                   3086 	.area CONST   (CODE)
      000291                       3087 ___str_33:
      000291 42 75 66 66 65 72 20  3088 	.ascii "Buffer size= %d "
             73 69 7A 65 3D 20 25
             64 20
      0002A1 0A                    3089 	.db 0x0a
      0002A2 0D                    3090 	.db 0x0d
      0002A3 00                    3091 	.db 0x00
                                   3092 	.area CSEG    (CODE)
                                   3093 	.area CONST   (CODE)
      0002A4                       3094 ___str_34:
      0002A4 4E 75 6D 62 65 72 20  3095 	.ascii "Number of storage characters in buffer0= %d "
             6F 66 20 73 74 6F 72
             61 67 65 20 63 68 61
             72 61 63 74 65 72 73
             20 69 6E 20 62 75 66
             66 65 72 30 3D 20 25
             64 20
      0002D0 0A                    3096 	.db 0x0a
      0002D1 0D                    3097 	.db 0x0d
      0002D2 00                    3098 	.db 0x00
                                   3099 	.area CSEG    (CODE)
                                   3100 	.area CONST   (CODE)
      0002D3                       3101 ___str_35:
      0002D3 41 6D 6F 75 6E 74 20  3102 	.ascii "Amount of free space in buffer0= %d "
             6F 66 20 66 72 65 65
             20 73 70 61 63 65 20
             69 6E 20 62 75 66 66
             65 72 30 3D 20 25 64
             20
      0002F7 0A                    3103 	.db 0x0a
      0002F8 0D                    3104 	.db 0x0d
      0002F9 00                    3105 	.db 0x00
                                   3106 	.area CSEG    (CODE)
                                   3107 	.area CONST   (CODE)
      0002FA                       3108 ___str_36:
      0002FA 2D 2D 2D 2D 2D 2D 2D  3109 	.ascii "----------------------Buffer %d details --------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 42 75 66 66 65 72
             20 25 64 20 64 65 74
             61 69 6C 73 20 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      000336 2D 2D 2D 2D           3110 	.ascii "----"
      00033A 0A                    3111 	.db 0x0a
      00033B 0D                    3112 	.db 0x0d
      00033C 00                    3113 	.db 0x00
                                   3114 	.area CSEG    (CODE)
                                   3115 	.area CONST   (CODE)
      00033D                       3116 ___str_37:
      00033D 2A 2A 2A 2A 2A 2A 2A  3117 	.ascii "**********Storage characters at Buffer0:**********"
             2A 2A 2A 53 74 6F 72
             61 67 65 20 63 68 61
             72 61 63 74 65 72 73
             20 61 74 20 42 75 66
             66 65 72 30 3A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A
      00036F 0D                    3118 	.db 0x0d
      000370 00                    3119 	.db 0x00
                                   3120 	.area CSEG    (CODE)
                                   3121 	.area CONST   (CODE)
      000371                       3122 ___str_38:
      000371 25 63                 3123 	.ascii "%c"
      000373 0A                    3124 	.db 0x0a
      000374 0D                    3125 	.db 0x0d
      000375 00                    3126 	.db 0x00
                                   3127 	.area CSEG    (CODE)
                                   3128 	.area CONST   (CODE)
      000376                       3129 ___str_39:
      000376 25 63 20              3130 	.ascii "%c "
      000379 00                    3131 	.db 0x00
                                   3132 	.area CSEG    (CODE)
                                   3133 	.area CONST   (CODE)
      00037A                       3134 ___str_40:
      00037A 0A                    3135 	.db 0x0a
      00037B 0D                    3136 	.db 0x0d
      00037C 00                    3137 	.db 0x00
                                   3138 	.area CSEG    (CODE)
                                   3139 	.area CONST   (CODE)
      00037D                       3140 ___str_45:
      00037D 43 6F 6D 6D 61 6E 64  3141 	.ascii "Command symbol received "
             20 73 79 6D 62 6F 6C
             20 72 65 63 65 69 76
             65 64 20
      000395 0A                    3142 	.db 0x0a
      000396 0D                    3143 	.db 0x0d
      000397 00                    3144 	.db 0x00
                                   3145 	.area CSEG    (CODE)
                                   3146 	.area CONST   (CODE)
      000398                       3147 ___str_46:
      000398 43 6F 6D 6D 61 6E 64  3148 	.ascii "Command character= %c "
             20 63 68 61 72 61 63
             74 65 72 3D 20 25 63
             20
      0003AE 0A                    3149 	.db 0x0a
      0003AF 0D                    3150 	.db 0x0d
      0003B0 00                    3151 	.db 0x00
                                   3152 	.area CSEG    (CODE)
                                   3153 	.area CONST   (CODE)
      0003B1                       3154 ___str_53:
      0003B1 43 6F 6D 6D 61 6E 64  3155 	.ascii "Command characters to do the following actions"
             20 63 68 61 72 61 63
             74 65 72 73 20 74 6F
             20 64 6F 20 74 68 65
             20 66 6F 6C 6C 6F 77
             69 6E 67 20 61 63 74
             69 6F 6E 73
      0003DF 0D                    3156 	.db 0x0d
      0003E0 0A                    3157 	.db 0x0a
      0003E1 55 70 70 65 72 20 63  3158 	.ascii "Upper cases letter are storage characters and are stored in "
             61 73 65 73 20 6C 65
             74 74 65 72 20 61 72
             65 20 73 74 6F 72 61
             67 65 20 63 68 61 72
             61 63 74 65 72 73 20
             61 6E 64 20 61 72 65
             20 73 74 6F 72 65 64
             20 69 6E 20
      00041D 62 75 66 66 65 72 30  3159 	.ascii "buffer0"
      000424 0D                    3160 	.db 0x0d
      000425 0A                    3161 	.db 0x0a
      000426 54 68 65 20 27 2B 27  3162 	.ascii "The '+' character adds a new buffer"
             20 63 68 61 72 61 63
             74 65 72 20 61 64 64
             73 20 61 20 6E 65 77
             20 62 75 66 66 65 72
      000449 0D                    3163 	.db 0x0d
      00044A 0A                    3164 	.db 0x0a
      00044B 54 68 65 20 27 2D 27  3165 	.ascii "The '-' character deletes the entered buffer"
             20 63 68 61 72 61 63
             74 65 72 20 64 65 6C
             65 74 65 73 20 74 68
             65 20 65 6E 74 65 72
             65 64 20 62 75 66 66
             65 72
      000477 0D                    3166 	.db 0x0d
      000478 0A                    3167 	.db 0x0a
      000479 54 68 65 20 27 3F 27  3168 	.ascii "The '?' character gives details of all buffers"
             20 63 68 61 72 61 63
             74 65 72 20 67 69 76
             65 73 20 64 65 74 61
             69 6C 73 20 6F 66 20
             61 6C 6C 20 62 75 66
             66 65 72 73
      0004A7 0D                    3169 	.db 0x0d
      0004A8 0A                    3170 	.db 0x0a
      0004A9 54 68 65 20 27 3D 27  3171 	.ascii "The '=' character gives hex values of characters in buffer0"
             20 63 68 61 72 61 63
             74 65 72 20 67 69 76
             65 73 20 68 65 78 20
             76 61 6C 75 65 73 20
             6F 66 20 63 68 61 72
             61 63 74 65 72 73 20
             69 6E 20 62 75 66 66
             65 72 30
      0004E4 0D                    3172 	.db 0x0d
      0004E5 0A                    3173 	.db 0x0a
      0004E6 54 68 65 20 27 40 27  3174 	.ascii "The '@' character frees all buffers"
             20 63 68 61 72 61 63
             74 65 72 20 66 72 65
             65 73 20 61 6C 6C 20
             62 75 66 66 65 72 73
      000509 0D                    3175 	.db 0x0d
      00050A 0A                    3176 	.db 0x0a
      00050B 45 6E 74 65 72 20 74  3177 	.ascii "Enter the size between 48-4800 to allocate buffers"
             68 65 20 73 69 7A 65
             20 62 65 74 77 65 65
             6E 20 34 38 2D 34 38
             30 30 20 74 6F 20 61
             6C 6C 6F 63 61 74 65
             20 62 75 66 66 65 72
             73
      00053D 0A                    3178 	.db 0x0a
      00053E 0D                    3179 	.db 0x0d
      00053F 00                    3180 	.db 0x00
                                   3181 	.area CSEG    (CODE)
                                   3182 	.area CONST   (CODE)
      000540                       3183 ___str_54:
      000540 2B 20 53 79 6D 62 6F  3184 	.ascii "+ Symbol received "
             6C 20 72 65 63 65 69
             76 65 64 20
      000552 0A                    3185 	.db 0x0a
      000553 0D                    3186 	.db 0x0d
      000554 0A                    3187 	.db 0x0a
      000555 45 6E 74 65 72 20 6E  3188 	.ascii "Enter no of bytes between 30 & 300"
             6F 20 6F 66 20 62 79
             74 65 73 20 62 65 74
             77 65 65 6E 20 33 30
             20 26 20 33 30 30
      000577 0A                    3189 	.db 0x0a
      000578 0D                    3190 	.db 0x0d
      000579 00                    3191 	.db 0x00
                                   3192 	.area CSEG    (CODE)
                                   3193 	.area CONST   (CODE)
      00057A                       3194 ___str_55:
      00057A 2D 20 53 79 6D 62 6F  3195 	.ascii "- Symbol received "
             6C 20 72 65 63 65 69
             76 65 64 20
      00058C 0A                    3196 	.db 0x0a
      00058D 0D                    3197 	.db 0x0d
      00058E 0A                    3198 	.db 0x0a
      00058F 45 6E 74 65 72 20 74  3199 	.ascii "Enter the buffer number to be deleted "
             68 65 20 62 75 66 66
             65 72 20 6E 75 6D 62
             65 72 20 74 6F 20 62
             65 20 64 65 6C 65 74
             65 64 20
      0005B5 0A                    3200 	.db 0x0a
      0005B6 0D                    3201 	.db 0x0d
      0005B7 00                    3202 	.db 0x00
                                   3203 	.area CSEG    (CODE)
                                   3204 	.area CONST   (CODE)
      0005B8                       3205 ___str_56:
      0005B8 3D 20 53 79 6D 62 6F  3206 	.ascii "= Symbol received "
             6C 20 72 65 63 65 69
             76 65 64 20
      0005CA 0A                    3207 	.db 0x0a
      0005CB 0D                    3208 	.db 0x0d
      0005CC 0A                    3209 	.db 0x0a
      0005CD 48 65 78 61 64 65 63  3210 	.ascii "Hexadecimal values of storage characters at Buffer0 "
             69 6D 61 6C 20 76 61
             6C 75 65 73 20 6F 66
             20 73 74 6F 72 61 67
             65 20 63 68 61 72 61
             63 74 65 72 73 20 61
             74 20 42 75 66 66 65
             72 30 20
      000601 0A                    3211 	.db 0x0a
      000602 0D                    3212 	.db 0x0d
      000603 00                    3213 	.db 0x00
                                   3214 	.area CSEG    (CODE)
                                   3215 	.area CONST   (CODE)
      000604                       3216 ___str_57:
      000604 40 20 53 79 6D 62 6F  3217 	.ascii "@ Symbol received "
             6C 20 72 65 63 65 69
             76 65 64 20
      000616 0A                    3218 	.db 0x0a
      000617 0D                    3219 	.db 0x0d
      000618 0A                    3220 	.db 0x0a
      000619 46 72 65 65 69 6E 67  3221 	.ascii "Freeing all buffers "
             20 61 6C 6C 20 62 75
             66 66 65 72 73 20
      00062D 0A                    3222 	.db 0x0a
      00062E 0D                    3223 	.db 0x0d
      00062F 00                    3224 	.db 0x00
                                   3225 	.area CSEG    (CODE)
                                   3226 	.area CONST   (CODE)
      000630                       3227 ___str_58:
      000630 20 20 25 73           3228 	.ascii "  %s"
      000634 0A                    3229 	.db 0x0a
      000635 0D                    3230 	.db 0x0d
      000636 00                    3231 	.db 0x00
                                   3232 	.area CSEG    (CODE)
                                   3233 	.area CONST   (CODE)
      000637                       3234 ___str_59:
      000637 20 20 25 30 34 78 20  3235 	.ascii "  %04x "
      00063E 00                    3236 	.db 0x00
                                   3237 	.area CSEG    (CODE)
                                   3238 	.area CONST   (CODE)
      00063F                       3239 ___str_60:
      00063F 20 25 30 32 78        3240 	.ascii " %02x"
      000644 00                    3241 	.db 0x00
                                   3242 	.area CSEG    (CODE)
                                   3243 	.area CONST   (CODE)
      000645                       3244 ___str_61:
      000645 20 20 20              3245 	.ascii "   "
      000648 00                    3246 	.db 0x00
                                   3247 	.area CSEG    (CODE)
                                   3248 	.area XINIT   (CODE)
                                   3249 	.area CABS    (ABS,CODE)
